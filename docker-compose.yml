services:
  # EcoGlow Server (Node.js/NestJS)
  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecoflow-server
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://ecoflow_user:ecoflow_password@postgres:5432/ecoflow
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - ecoflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/products"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ecoflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ecoflow
      POSTGRES_USER: ecoflow_user
      POSTGRES_PASSWORD: ecoflow_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/seeds.sql:/docker-entrypoint-initdb.d/02-seeds.sql:ro
    networks:
      - ecoflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecoflow_user -d ecoflow"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # pgAdmin Web Interface
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ecoflow-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ecoflow.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin-servers.json:/pgadmin4/servers.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecoflow-network

  # Redis for session storage (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: ecoflow-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecoflow-network
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local

networks:
  ecoflow-network:
    driver: bridge
