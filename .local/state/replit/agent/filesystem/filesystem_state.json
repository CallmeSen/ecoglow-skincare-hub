{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# EcoGlow Skincare Hub - E-commerce Platform\n\n## Overview\n\nEcoGlow Skincare Hub is a comprehensive e-commerce platform specializing in sustainable beauty and skincare products. The application focuses on eco-friendly formulations, plant-derived ingredients, and environmentally conscious beauty solutions. The platform targets conscious consumers interested in clean beauty products like bakuchiol serums, vegan makeup, and sustainable skincare kits.\n\nThe application features a full-stack architecture with React frontend, Express backend, and PostgreSQL database, emphasizing personalization through AI-driven quizzes, AR try-on capabilities, and sustainability tracking.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development practices\n- **Routing**: Wouter for lightweight client-side routing with support for dynamic routes\n- **State Management**: TanStack Query for server state management with caching and synchronization\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives for accessible, customizable interface elements\n- **Styling**: Tailwind CSS with custom CSS variables for the EcoGlow brand color system (forest green, sage green, gold gradients)\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for RESTful API endpoints\n- **Language**: TypeScript for consistent type safety across frontend and backend\n- **API Design**: RESTful endpoints following conventional patterns for products, users, cart, wishlist, orders, blog, and quiz functionality\n- **Storage Pattern**: Interface-based storage abstraction allowing for multiple implementations (currently in-memory, designed for database integration)\n\n### Database Design\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Connection**: Neon Database serverless PostgreSQL for scalable cloud hosting\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Data Models**: Comprehensive schemas for products, users, cart items, wishlist items, orders, blog posts, and quiz responses with rich metadata support\n\n### Component Architecture\n- **Design System**: Modular component library with consistent styling and behavior patterns\n- **Layout Components**: Header, Footer, and routing components for consistent navigation\n- **Feature Components**: Specialized components for product display, shopping cart, AR try-on, quiz functionality, and sustainability tracking\n- **UI Components**: Reusable Shadcn/ui components for forms, dialogs, cards, and interactive elements\n\n### Authentication & User Management\n- **User System**: Profile management with skin type preferences, sustainability values, and personalization data\n- **Session Handling**: Cookie-based sessions with secure storage for user state\n- **Personalization**: AI-driven recommendations based on quiz responses and user preferences\n\n### E-commerce Features\n- **Product Management**: Comprehensive product catalog with filtering, search, and categorization\n- **Shopping Cart**: Persistent cart state with quantity management and shipping calculations\n- **Wishlist**: User wishlist functionality with product saving and management\n- **Order Processing**: Order creation and tracking with sustainability impact calculations\n\n### Advanced Features\n- **AR Try-On**: Camera-based augmented reality for virtual makeup testing using browser APIs\n- **Voice Search**: Web Speech API integration for hands-free product discovery\n- **Sustainability Tracking**: Carbon footprint calculation, tree planting programs, and eco-impact metrics\n- **AI Personalization**: Quiz-driven product recommendations based on skin type, concerns, and preferences\n\n## External Dependencies\n\n### UI & Design\n- **Radix UI**: Comprehensive primitive components for accessible interface elements\n- **Tailwind CSS**: Utility-first CSS framework for rapid styling and responsive design\n- **Lucide React**: Modern icon library for consistent iconography\n- **React Icons**: Additional icon sets for social media and brand icons\n\n### Data & State Management\n- **TanStack Query**: Server state management with caching, background updates, and optimistic updates\n- **Drizzle ORM**: Type-safe PostgreSQL ORM with migration support\n- **Drizzle Zod**: Schema validation integration for runtime type checking\n\n### Database & Hosting\n- **Neon Database**: Serverless PostgreSQL database with automatic scaling\n- **Environment Variables**: Database connection and configuration management\n\n### Development & Build Tools\n- **Vite**: Fast build tool with hot module replacement and optimized bundling\n- **TypeScript**: Static type checking for improved code quality and developer experience\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Browser APIs\n- **Web Speech API**: Voice recognition for hands-free search functionality\n- **Camera API**: Device camera access for AR try-on features\n- **Local Storage**: Client-side data persistence for user preferences and cart state\n\n### Form & Validation\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: Runtime schema validation for type-safe data handling\n- **Hookform Resolvers**: Integration between React Hook Form and Zod validation\n\n### Styling & Animation\n- **Class Variance Authority**: Utility for managing component style variants\n- **CLSX**: Utility for conditional CSS class composition\n- **Date-fns**: Date manipulation and formatting library for order tracking and blog dates","size_bytes":5689},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProductSchema, insertUserSchema, insertCartItemSchema, insertWishlistItemSchema, insertOrderSchema, insertBlogPostSchema, insertQuizResponseSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Product routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { category, featured, trending } = req.query;\n      const filters: any = {};\n      \n      if (category) filters.category = category as string;\n      if (featured !== undefined) filters.featured = featured === 'true';\n      if (trending !== undefined) filters.trending = trending === 'true';\n      \n      const products = await storage.getProducts(filters);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.get(\"/api/products/search/:query\", async (req, res) => {\n    try {\n      const products = await storage.searchProducts(req.params.query);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error searching products:\", error);\n      res.status(500).json({ message: \"Failed to search products\" });\n    }\n  });\n\n  // User routes\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.updateUser(req.params.id, req.body);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Cart routes\n  app.get(\"/api/cart/:userId\", async (req, res) => {\n    try {\n      const cartItems = await storage.getCartItems(req.params.userId);\n      \n      // Fetch product details for each cart item\n      const itemsWithProducts = await Promise.all(\n        cartItems.map(async (item) => {\n          const product = await storage.getProduct(item.productId);\n          return { ...item, product };\n        })\n      );\n      \n      res.json(itemsWithProducts);\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n      res.status(500).json({ message: \"Failed to fetch cart\" });\n    }\n  });\n\n  app.post(\"/api/cart\", async (req, res) => {\n    try {\n      const cartData = insertCartItemSchema.parse(req.body);\n      const cartItem = await storage.addToCart(cartData);\n      res.json(cartItem);\n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n      res.status(500).json({ message: \"Failed to add to cart\" });\n    }\n  });\n\n  app.patch(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const { quantity } = req.body;\n      const cartItem = await storage.updateCartItem(req.params.id, quantity);\n      if (!cartItem) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      res.json(cartItem);\n    } catch (error) {\n      console.error(\"Error updating cart item:\", error);\n      res.status(500).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const success = await storage.removeFromCart(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Cart item not found\" });\n      }\n      res.json({ message: \"Item removed from cart\" });\n    } catch (error) {\n      console.error(\"Error removing from cart:\", error);\n      res.status(500).json({ message: \"Failed to remove from cart\" });\n    }\n  });\n\n  app.delete(\"/api/cart/clear/:userId\", async (req, res) => {\n    try {\n      await storage.clearCart(req.params.userId);\n      res.json({ message: \"Cart cleared\" });\n    } catch (error) {\n      console.error(\"Error clearing cart:\", error);\n      res.status(500).json({ message: \"Failed to clear cart\" });\n    }\n  });\n\n  // Wishlist routes\n  app.get(\"/api/wishlist/:userId\", async (req, res) => {\n    try {\n      const wishlistItems = await storage.getWishlistItems(req.params.userId);\n      \n      // Fetch product details for each wishlist item\n      const itemsWithProducts = await Promise.all(\n        wishlistItems.map(async (item) => {\n          const product = await storage.getProduct(item.productId);\n          return { ...item, product };\n        })\n      );\n      \n      res.json(itemsWithProducts);\n    } catch (error) {\n      console.error(\"Error fetching wishlist:\", error);\n      res.status(500).json({ message: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  app.post(\"/api/wishlist\", async (req, res) => {\n    try {\n      const wishlistData = insertWishlistItemSchema.parse(req.body);\n      const wishlistItem = await storage.addToWishlist(wishlistData);\n      res.json(wishlistItem);\n    } catch (error) {\n      console.error(\"Error adding to wishlist:\", error);\n      res.status(500).json({ message: \"Failed to add to wishlist\" });\n    }\n  });\n\n  app.delete(\"/api/wishlist/:id\", async (req, res) => {\n    try {\n      const success = await storage.removeFromWishlist(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Wishlist item not found\" });\n      }\n      res.json({ message: \"Item removed from wishlist\" });\n    } catch (error) {\n      console.error(\"Error removing from wishlist:\", error);\n      res.status(500).json({ message: \"Failed to remove from wishlist\" });\n    }\n  });\n\n  // Order routes\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const orderData = insertOrderSchema.parse(req.body);\n      const order = await storage.createOrder(orderData);\n      \n      // Clear cart after successful order\n      if (orderData.userId) {\n        await storage.clearCart(orderData.userId);\n      }\n      \n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  app.get(\"/api/orders/:userId\", async (req, res) => {\n    try {\n      const orders = await storage.getOrders(req.params.userId);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Blog routes\n  app.get(\"/api/blog\", async (req, res) => {\n    try {\n      const { category, featured } = req.query;\n      const filters: any = {};\n      \n      if (category) filters.category = category as string;\n      if (featured !== undefined) filters.featured = featured === 'true';\n      \n      const posts = await storage.getBlogPosts(filters);\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching blog posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.get(\"/api/blog/:slug\", async (req, res) => {\n    try {\n      const post = await storage.getBlogPost(req.params.slug);\n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error fetching blog post:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog post\" });\n    }\n  });\n\n  // Quiz routes\n  app.post(\"/api/quiz\", async (req, res) => {\n    try {\n      const quizData = insertQuizResponseSchema.parse(req.body);\n      \n      // Generate recommendations based on quiz responses\n      const recommendations = await generateRecommendations(quizData.responses);\n      \n      const response = await storage.saveQuizResponse({\n        ...quizData,\n        recommendations,\n      });\n      \n      res.json(response);\n    } catch (error) {\n      console.error(\"Error saving quiz response:\", error);\n      res.status(500).json({ message: \"Failed to save quiz response\" });\n    }\n  });\n\n  app.get(\"/api/quiz/:userId\", async (req, res) => {\n    try {\n      const response = await storage.getQuizResponse(req.params.userId);\n      if (!response) {\n        return res.status(404).json({ message: \"Quiz response not found\" });\n      }\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error fetching quiz response:\", error);\n      res.status(500).json({ message: \"Failed to fetch quiz response\" });\n    }\n  });\n\n  // Analytics and stats\n  app.get(\"/api/stats/sustainability\", async (req, res) => {\n    try {\n      // Calculate sustainability stats\n      const stats = {\n        treesPlanted: 12000,\n        co2Offset: 500,\n        sustainablePackaging: 95,\n        happyCustomers: 25000,\n      };\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching sustainability stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch sustainability stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function to generate product recommendations based on quiz responses\nasync function generateRecommendations(responses: Record<string, any>): Promise<string[]> {\n  const { skinType, concerns, sustainability, budget } = responses;\n  \n  // Simple recommendation algorithm\n  const recommendations: string[] = [];\n  \n  // Always recommend bakuchiol serum for anti-aging concerns\n  if (concerns?.includes('aging')) {\n    recommendations.push('1'); // Bakuchiol Glow Serum\n  }\n  \n  // Recommend beet balm for makeup users\n  if (responses.makeup === 'yes' || concerns?.includes('hydration')) {\n    recommendations.push('2'); // Beet Tinted Balm\n  }\n  \n  // Recommend kit for complete routine seekers\n  if (budget === 'medium' || budget === 'high') {\n    recommendations.push('3'); // Complete Glow Kit\n  }\n  \n  // Recommend supplements for internal health\n  if (concerns?.includes('dullness') || sustainability === 'very') {\n    recommendations.push('4'); // Beet Glow Gummies\n  }\n  \n  return recommendations;\n}\n","size_bytes":11030},"server/storage.ts":{"content":"import { type Product, type InsertProduct, type User, type InsertUser, type CartItem, type InsertCartItem, type WishlistItem, type InsertWishlistItem, type Order, type InsertOrder, type BlogPost, type InsertBlogPost, type QuizResponse, type InsertQuizResponse } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Product operations\n  getProducts(filters?: { category?: string; featured?: boolean; trending?: boolean }): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  searchProducts(query: string): Promise<Product[]>;\n\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Cart operations\n  getCartItems(userId: string): Promise<CartItem[]>;\n  addToCart(item: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: string, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(id: string): Promise<boolean>;\n  clearCart(userId: string): Promise<boolean>;\n\n  // Wishlist operations\n  getWishlistItems(userId: string): Promise<WishlistItem[]>;\n  addToWishlist(item: InsertWishlistItem): Promise<WishlistItem>;\n  removeFromWishlist(id: string): Promise<boolean>;\n\n  // Order operations\n  createOrder(order: InsertOrder): Promise<Order>;\n  getOrders(userId: string): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n\n  // Blog operations\n  getBlogPosts(filters?: { category?: string; featured?: boolean }): Promise<BlogPost[]>;\n  getBlogPost(slug: string): Promise<BlogPost | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n\n  // Quiz operations\n  saveQuizResponse(response: InsertQuizResponse): Promise<QuizResponse>;\n  getQuizResponse(userId: string): Promise<QuizResponse | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private products: Map<string, Product>;\n  private users: Map<string, User>;\n  private cartItems: Map<string, CartItem>;\n  private wishlistItems: Map<string, WishlistItem>;\n  private orders: Map<string, Order>;\n  private blogPosts: Map<string, BlogPost>;\n  private quizResponses: Map<string, QuizResponse>;\n\n  constructor() {\n    this.products = new Map();\n    this.users = new Map();\n    this.cartItems = new Map();\n    this.wishlistItems = new Map();\n    this.orders = new Map();\n    this.blogPosts = new Map();\n    this.quizResponses = new Map();\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample products\n    const sampleProducts: Product[] = [\n      {\n        id: \"1\",\n        name: \"Bakuchiol Glow Serum\",\n        description: \"Our bestselling bakuchiol serum offers gentle anti-aging benefits without irritation. Derived from Psoralea corylifolia, this plant-based powerhouse reduces fine lines by up to 20% in clinical studies while being 100% vegan and cruelty-free.\",\n        price: \"28.00\",\n        category: \"serums\",\n        subcategory: \"anti-aging\",\n        images: [\"https://images.unsplash.com/photo-1570194065650-d99fb4bedf0a?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=800\"],\n        ingredients: [\"Bakuchiol 1%\", \"Hyaluronic Acid\", \"Vitamin E\", \"Jojoba Oil\", \"Rose Hip Oil\"],\n        benefits: [\"Reduces fine lines\", \"Improves skin elasticity\", \"Gentle on sensitive skin\", \"Antioxidant protection\"],\n        skinTypes: [\"dry\", \"combination\", \"sensitive\"],\n        concerns: [\"aging\", \"hydration\"],\n        sustainabilityScore: 95,\n        isVegan: true,\n        isCrueltyFree: true,\n        isOrganic: true,\n        carbonFootprint: \"0.5\",\n        stock: 50,\n        rating: \"4.8\",\n        reviewCount: 234,\n        featured: true,\n        trending: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"2\",\n        name: \"Beet Tinted Balm\",\n        description: \"Multi-use vegan color made from natural beet extracts. This nourishing balm provides buildable color while moisturizing your lips with organic ingredients.\",\n        price: \"15.00\",\n        category: \"makeup\",\n        subcategory: \"lips\",\n        images: [\"https://images.unsplash.com/photo-1586495777744-4413f21062fa?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=800\"],\n        ingredients: [\"Beet Extract\", \"Coconut Oil\", \"Shea Butter\", \"Carnauba Wax\", \"Vitamin E\"],\n        benefits: [\"Natural color\", \"Moisturizing\", \"Long-lasting\", \"Buildable coverage\"],\n        skinTypes: [\"all\"],\n        concerns: [\"hydration\"],\n        sustainabilityScore: 90,\n        isVegan: true,\n        isCrueltyFree: true,\n        isOrganic: true,\n        carbonFootprint: \"0.3\",\n        stock: 75,\n        rating: \"4.6\",\n        reviewCount: 156,\n        featured: true,\n        trending: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"3\",\n        name: \"Complete Glow Kit\",\n        description: \"5-piece sustainable routine with customizable options. Includes cleanser, toner, serum, moisturizer, and mask in eco-friendly packaging.\",\n        price: \"65.00\",\n        category: \"kits\",\n        subcategory: \"skincare\",\n        images: [\"https://images.unsplash.com/photo-1556228720-195a672e8a03?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=800\"],\n        ingredients: [\"Bakuchiol\", \"Hyaluronic Acid\", \"Plant Ceramides\", \"Green Tea Extract\", \"Niacinamide\"],\n        benefits: [\"Complete routine\", \"Eco-friendly packaging\", \"Customizable\", \"15% savings\"],\n        skinTypes: [\"all\"],\n        concerns: [\"aging\", \"hydration\", \"acne\"],\n        sustainabilityScore: 98,\n        isVegan: true,\n        isCrueltyFree: true,\n        isOrganic: true,\n        carbonFootprint: \"1.2\",\n        stock: 30,\n        rating: \"4.9\",\n        reviewCount: 89,\n        featured: true,\n        trending: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"4\",\n        name: \"Beet Glow Gummies\",\n        description: \"Internal radiance supplement with 500mg beet extract for natural glow and detoxification. Comes in compostable packaging.\",\n        price: \"22.00\",\n        category: \"supplements\",\n        subcategory: \"gummies\",\n        images: [\"https://images.unsplash.com/photo-1584308666744-24d5c474f2ae?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=800\"],\n        ingredients: [\"Beet Extract 500mg\", \"Vitamin C\", \"Biotin\", \"Zinc\", \"Natural Berry Flavor\"],\n        benefits: [\"Internal glow\", \"Detoxification\", \"Antioxidant support\", \"Skin health\"],\n        skinTypes: [\"all\"],\n        concerns: [\"dullness\", \"detox\"],\n        sustainabilityScore: 85,\n        isVegan: true,\n        isCrueltyFree: true,\n        isOrganic: false,\n        carbonFootprint: \"0.8\",\n        stock: 100,\n        rating: \"4.5\",\n        reviewCount: 167,\n        featured: false,\n        trending: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n\n    sampleProducts.forEach(product => this.products.set(product.id, product));\n\n    // Sample blog posts\n    const sampleBlogPosts: BlogPost[] = [\n      {\n        id: \"1\",\n        title: \"Bakuchiol: The 2025 Retinol Revolution\",\n        slug: \"bakuchiol-retinol-revolution-2025\",\n        excerpt: \"Discover why this plant-based alternative is taking the beauty world by storm with 300% search growth.\",\n        content: \"Full blog content about bakuchiol benefits and usage...\",\n        featuredImage: \"https://images.unsplash.com/photo-1512290923902-8a9f81dc236c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        category: \"skincare-science\",\n        readTime: 5,\n        featured: true,\n        productIds: [\"1\"],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"2\",\n        title: \"Beet-Tinted Looks for Natural Glow\",\n        slug: \"beet-tinted-natural-glow-makeup\",\n        excerpt: \"Master the art of natural, plant-based color with our step-by-step tutorials.\",\n        content: \"Full blog content about beet-based makeup...\",\n        featuredImage: \"https://images.unsplash.com/photo-1596462502278-27bfdc403348?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        category: \"makeup-trends\",\n        readTime: 7,\n        featured: true,\n        productIds: [\"2\"],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"3\",\n        title: \"Zero-Waste Beauty Routine Guide\",\n        slug: \"zero-waste-beauty-routine-guide\",\n        excerpt: \"Simple steps to create an eco-friendly beauty routine that's good for you and the planet.\",\n        content: \"Full blog content about sustainable beauty...\",\n        featuredImage: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n        category: \"sustainability\",\n        readTime: 4,\n        featured: true,\n        productIds: [\"3\"],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n\n    sampleBlogPosts.forEach(post => this.blogPosts.set(post.id, post));\n  }\n\n  // Product operations\n  async getProducts(filters?: { category?: string; featured?: boolean; trending?: boolean }): Promise<Product[]> {\n    let products = Array.from(this.products.values());\n    \n    if (filters?.category) {\n      products = products.filter(p => p.category === filters.category);\n    }\n    if (filters?.featured !== undefined) {\n      products = products.filter(p => p.featured === filters.featured);\n    }\n    if (filters?.trending !== undefined) {\n      products = products.filter(p => p.trending === filters.trending);\n    }\n    \n    return products;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const newProduct: Product = {\n      ...product,\n      id,\n      concerns: product.concerns || [],\n      ingredients: product.ingredients || [],\n      benefits: product.benefits || [],\n      skinTypes: product.skinTypes || [],\n      images: product.images || [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.products.set(id, newProduct);\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existing = this.products.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { \n      ...existing, \n      ...product,\n      concerns: product.concerns || existing.concerns,\n      ingredients: product.ingredients || existing.ingredients,\n      benefits: product.benefits || existing.benefits,\n      skinTypes: product.skinTypes || existing.skinTypes,\n      images: product.images || existing.images,\n      updatedAt: new Date() \n    };\n    this.products.set(id, updated);\n    return updated;\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    const lowercaseQuery = query.toLowerCase();\n    return Array.from(this.products.values()).filter(product =>\n      product.name.toLowerCase().includes(lowercaseQuery) ||\n      product.description.toLowerCase().includes(lowercaseQuery) ||\n      product.category.toLowerCase().includes(lowercaseQuery) ||\n      (product.ingredients && product.ingredients.some(ing => ing.toLowerCase().includes(lowercaseQuery)))\n    );\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const newUser: User = {\n      ...user,\n      id,\n      skinConcerns: user.skinConcerns || [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, newUser);\n    return newUser;\n  }\n\n  async updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined> {\n    const existing = this.users.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...user, updatedAt: new Date() };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  // Cart operations\n  async getCartItems(userId: string): Promise<CartItem[]> {\n    return Array.from(this.cartItems.values()).filter(item => item.userId === userId);\n  }\n\n  async addToCart(item: InsertCartItem): Promise<CartItem> {\n    const id = randomUUID();\n    const newItem: CartItem = {\n      ...item,\n      id,\n      createdAt: new Date(),\n    };\n    this.cartItems.set(id, newItem);\n    return newItem;\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem | undefined> {\n    const existing = this.cartItems.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, quantity };\n    this.cartItems.set(id, updated);\n    return updated;\n  }\n\n  async removeFromCart(id: string): Promise<boolean> {\n    return this.cartItems.delete(id);\n  }\n\n  async clearCart(userId: string): Promise<boolean> {\n    const items = await this.getCartItems(userId);\n    items.forEach(item => this.cartItems.delete(item.id));\n    return true;\n  }\n\n  // Wishlist operations\n  async getWishlistItems(userId: string): Promise<WishlistItem[]> {\n    return Array.from(this.wishlistItems.values()).filter(item => item.userId === userId);\n  }\n\n  async addToWishlist(item: InsertWishlistItem): Promise<WishlistItem> {\n    const id = randomUUID();\n    const newItem: WishlistItem = {\n      ...item,\n      id,\n      createdAt: new Date(),\n    };\n    this.wishlistItems.set(id, newItem);\n    return newItem;\n  }\n\n  async removeFromWishlist(id: string): Promise<boolean> {\n    return this.wishlistItems.delete(id);\n  }\n\n  // Order operations\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const newOrder: Order = {\n      ...order,\n      id,\n      createdAt: new Date(),\n    };\n    this.orders.set(id, newOrder);\n    return newOrder;\n  }\n\n  async getOrders(userId: string): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(order => order.userId === userId);\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  // Blog operations\n  async getBlogPosts(filters?: { category?: string; featured?: boolean }): Promise<BlogPost[]> {\n    let posts = Array.from(this.blogPosts.values());\n    \n    if (filters?.category) {\n      posts = posts.filter(p => p.category === filters.category);\n    }\n    if (filters?.featured !== undefined) {\n      posts = posts.filter(p => p.featured === filters.featured);\n    }\n    \n    return posts.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getBlogPost(slug: string): Promise<BlogPost | undefined> {\n    return Array.from(this.blogPosts.values()).find(post => post.slug === slug);\n  }\n\n  async createBlogPost(post: InsertBlogPost): Promise<BlogPost> {\n    const id = randomUUID();\n    const newPost: BlogPost = {\n      ...post,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.blogPosts.set(id, newPost);\n    return newPost;\n  }\n\n  // Quiz operations\n  async saveQuizResponse(response: InsertQuizResponse): Promise<QuizResponse> {\n    const id = randomUUID();\n    const newResponse: QuizResponse = {\n      ...response,\n      id,\n      createdAt: new Date(),\n    };\n    this.quizResponses.set(id, newResponse);\n    return newResponse;\n  }\n\n  async getQuizResponse(userId: string): Promise<QuizResponse | undefined> {\n    return Array.from(this.quizResponses.values()).find(response => response.userId === userId);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15852},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, decimal, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  category: varchar(\"category\").notNull(),\n  subcategory: varchar(\"subcategory\"),\n  images: jsonb(\"images\").$type<string[]>().default([]),\n  ingredients: jsonb(\"ingredients\").$type<string[]>().default([]),\n  benefits: jsonb(\"benefits\").$type<string[]>().default([]),\n  skinTypes: jsonb(\"skin_types\").$type<string[]>().default([]),\n  concerns: jsonb(\"concerns\").$type<string[]>().default([]),\n  sustainabilityScore: integer(\"sustainability_score\").default(0),\n  isVegan: boolean(\"is_vegan\").default(false),\n  isCrueltyFree: boolean(\"is_cruelty_free\").default(false),\n  isOrganic: boolean(\"is_organic\").default(false),\n  carbonFootprint: decimal(\"carbon_footprint\", { precision: 5, scale: 2 }).default(\"0\"),\n  stock: integer(\"stock\").default(0),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  featured: boolean(\"featured\").default(false),\n  trending: boolean(\"trending\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  skinType: varchar(\"skin_type\"),\n  skinConcerns: jsonb(\"skin_concerns\").$type<string[]>().default([]),\n  sustainabilityPreference: varchar(\"sustainability_preference\"),\n  budget: varchar(\"budget\"),\n  treesPlanted: integer(\"trees_planted\").default(0),\n  co2Offset: decimal(\"co2_offset\", { precision: 8, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  productId: varchar(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const wishlistItems = pgTable(\"wishlist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  productId: varchar(\"product_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  items: jsonb(\"items\").$type<{productId: string, quantity: number, price: string}[]>().default([]),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  shipping: decimal(\"shipping\", { precision: 10, scale: 2 }).default(\"0\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  shippingType: varchar(\"shipping_type\").default(\"standard\"),\n  carbonOffset: decimal(\"carbon_offset\", { precision: 8, scale: 2 }).default(\"0\"),\n  treesPlanted: integer(\"trees_planted\").default(0),\n  status: varchar(\"status\").default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  slug: varchar(\"slug\").notNull().unique(),\n  excerpt: text(\"excerpt\"),\n  content: text(\"content\").notNull(),\n  featuredImage: varchar(\"featured_image\"),\n  category: varchar(\"category\").notNull(),\n  readTime: integer(\"read_time\").default(5),\n  featured: boolean(\"featured\").default(false),\n  productIds: jsonb(\"product_ids\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const quizResponses = pgTable(\"quiz_responses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  responses: jsonb(\"responses\").$type<Record<string, any>>().notNull(),\n  recommendations: jsonb(\"recommendations\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWishlistItemSchema = createInsertSchema(wishlistItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertQuizResponseSchema = createInsertSchema(quizResponses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type WishlistItem = typeof wishlistItems.$inferSelect;\nexport type InsertWishlistItem = z.infer<typeof insertWishlistItemSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type QuizResponse = typeof quizResponses.$inferSelect;\nexport type InsertQuizResponse = z.infer<typeof insertQuizResponseSchema>;\n","size_bytes":6180},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Products from \"@/pages/products\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport Quiz from \"@/pages/quiz\";\nimport Sustainability from \"@/pages/sustainability\";\nimport Blog from \"@/pages/blog\";\nimport Cart from \"@/pages/cart\";\nimport Checkout from \"@/pages/checkout\";\nimport Account from \"@/pages/account\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { CartProvider } from \"@/hooks/use-cart\";\nimport { WishlistProvider } from \"@/hooks/use-wishlist\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/products\" component={Products} />\n          <Route path=\"/products/:category\" component={Products} />\n          <Route path=\"/product/:id\" component={ProductDetail} />\n          <Route path=\"/quiz\" component={Quiz} />\n          <Route path=\"/sustainability\" component={Sustainability} />\n          <Route path=\"/blog\" component={Blog} />\n          <Route path=\"/blog/:slug\" component={Blog} />\n          <Route path=\"/cart\" component={Cart} />\n          <Route path=\"/checkout\" component={Checkout} />\n          <Route path=\"/account\" component={Account} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <CartProvider>\n          <WishlistProvider>\n            <Toaster />\n            <Router />\n          </WishlistProvider>\n        </CartProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2080},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 98%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --primary: hsl(120, 61%, 34%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(210, 40%, 98%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --accent: hsl(152, 24%, 66%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(120, 61%, 34%);\n  --radius: 0.5rem;\n  \n  /* EcoGlow custom colors */\n  --forest-green: hsl(120, 61%, 34%);\n  --light-green: hsl(120, 73%, 75%);\n  --dark-green: hsl(120, 100%, 20%);\n  --gold-light: hsl(48, 77%, 76%);\n  --gold-dark: hsl(48, 85%, 47%);\n  --sage-green: hsl(152, 24%, 66%);\n  --berry-red: hsl(343, 55%, 38%);\n  --cream-beige: hsl(33, 43%, 87%);\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --primary: hsl(120, 100%, 20%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(152, 24%, 40%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(120, 100%, 20%);\n  \n  /* EcoGlow dark mode colors */\n  --forest-green: hsl(120, 100%, 20%);\n  --light-green: hsl(120, 50%, 40%);\n  --dark-green: hsl(120, 100%, 15%);\n  --sage-green: hsl(152, 24%, 40%);\n  --berry-red: hsl(343, 55%, 28%);\n  --cream-beige: hsl(33, 20%, 20%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-serif;\n  }\n}\n\n@layer components {\n  .eco-gradient {\n    background: linear-gradient(135deg, var(--gold-light) 0%, var(--gold-dark) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .hero-parallax {\n    background-attachment: fixed;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n  }\n\n  .transition-all {\n    transition: all 0.2s ease-in-out;\n  }\n\n  .product-card {\n    @apply transition-all duration-300 hover:transform hover:-translate-y-2 hover:shadow-xl;\n  }\n\n  .pulse-heart {\n    animation: pulse 2s infinite;\n  }\n\n  .cart-fly {\n    animation: flyToCart 0.6s ease-out;\n  }\n\n  .fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.1); }\n  100% { transform: scale(1); }\n}\n\n@keyframes flyToCart {\n  0% { transform: scale(1) translateX(0); }\n  50% { transform: scale(0.8) translateX(50px) translateY(-20px); }\n  100% { transform: scale(0.6) translateX(100px) translateY(-40px); }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--muted);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--sage-green);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: var(--forest-green);\n}\n","size_bytes":3805},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-cart.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { CartItemWithProduct } from \"@/lib/types\";\n\ninterface CartContextType {\n  items: CartItemWithProduct[];\n  itemCount: number;\n  total: number;\n  addToCart: (productId: string, quantity?: number) => Promise<void>;\n  updateQuantity: (itemId: string, quantity: number) => Promise<void>;\n  removeFromCart: (itemId: string) => Promise<void>;\n  clearCart: () => Promise<void>;\n  isLoading: boolean;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const [userId] = useState(\"demo-user\"); // In real app, get from auth\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: items = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\", userId],\n    enabled: !!userId,\n  });\n\n  const itemCount = items.reduce((sum: number, item: CartItemWithProduct) => sum + item.quantity, 0);\n  const total = items.reduce((sum: number, item: CartItemWithProduct) => {\n    return sum + (parseFloat(item.product?.price || \"0\") * item.quantity);\n  }, 0);\n\n  const addToCartMutation = useMutation({\n    mutationFn: async ({ productId, quantity = 1 }: { productId: string; quantity?: number }) => {\n      await apiRequest(\"POST\", \"/api/cart\", {\n        userId,\n        productId,\n        quantity,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", userId] });\n      toast({\n        title: \"Added to cart\",\n        description: \"Product has been added to your cart\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ itemId, quantity }: { itemId: string; quantity: number }) => {\n      await apiRequest(\"PATCH\", `/api/cart/${itemId}`, { quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", userId] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update cart item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeFromCartMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      await apiRequest(\"DELETE\", `/api/cart/${itemId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", userId] });\n      toast({\n        title: \"Removed from cart\",\n        description: \"Product has been removed from your cart\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove product from cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", `/api/cart/clear/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\", userId] });\n      toast({\n        title: \"Cart cleared\",\n        description: \"All items have been removed from your cart\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const value: CartContextType = {\n    items,\n    itemCount,\n    total,\n    addToCart: (productId: string, quantity = 1) => \n      addToCartMutation.mutateAsync({ productId, quantity }),\n    updateQuantity: (itemId: string, quantity: number) =>\n      updateQuantityMutation.mutateAsync({ itemId, quantity }),\n    removeFromCart: (itemId: string) =>\n      removeFromCartMutation.mutateAsync(itemId),\n    clearCart: () => clearCartMutation.mutateAsync(),\n    isLoading,\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n}\n","size_bytes":4300},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-voice-search.ts":{"content":"import { useState, useCallback } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface VoiceSearchResult {\n  transcript: string;\n  confidence: number;\n}\n\ninterface UseVoiceSearchReturn {\n  isListening: boolean;\n  transcript: string;\n  startListening: () => void;\n  stopListening: () => void;\n  resetTranscript: () => void;\n  isSupported: boolean;\n}\n\nexport function useVoiceSearch(): UseVoiceSearchReturn {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const { toast } = useToast();\n\n  const isSupported = typeof window !== \"undefined\" && \n    (\"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window);\n\n  const startListening = useCallback(() => {\n    if (!isSupported) {\n      toast({\n        title: \"Not supported\",\n        description: \"Voice search is not supported in this browser\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n    const recognition = new SpeechRecognition();\n\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = \"en-US\";\n\n    recognition.onstart = () => {\n      setIsListening(true);\n      toast({\n        title: \"Listening...\",\n        description: \"Speak now to search for products\",\n      });\n    };\n\n    recognition.onresult = (event: any) => {\n      const result = event.results[0][0];\n      setTranscript(result.transcript);\n      \n      toast({\n        title: \"Voice captured\",\n        description: `Searching for: \"${result.transcript}\"`,\n      });\n    };\n\n    recognition.onerror = (event: any) => {\n      setIsListening(false);\n      toast({\n        title: \"Error\",\n        description: \"Voice recognition error. Please try again.\",\n        variant: \"destructive\",\n      });\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    recognition.start();\n  }, [isSupported, toast]);\n\n  const stopListening = useCallback(() => {\n    setIsListening(false);\n  }, []);\n\n  const resetTranscript = useCallback(() => {\n    setTranscript(\"\");\n  }, []);\n\n  return {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    resetTranscript,\n    isSupported,\n  };\n}\n\n// Extend window interface for TypeScript\ndeclare global {\n  interface Window {\n    webkitSpeechRecognition: any;\n    SpeechRecognition: any;\n  }\n}\n","size_bytes":2429},"client/src/hooks/use-wishlist.tsx":{"content":"import { createContext, useContext, useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WishlistItemWithProduct } from \"@/lib/types\";\n\ninterface WishlistContextType {\n  items: WishlistItemWithProduct[];\n  isInWishlist: (productId: string) => boolean;\n  addToWishlist: (productId: string) => Promise<void>;\n  removeFromWishlist: (productId: string) => Promise<void>;\n  isLoading: boolean;\n}\n\nconst WishlistContext = createContext<WishlistContextType | undefined>(undefined);\n\nexport function WishlistProvider({ children }: { children: React.ReactNode }) {\n  const [userId] = useState(\"demo-user\"); // In real app, get from auth\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: items = [], isLoading } = useQuery({\n    queryKey: [\"/api/wishlist\", userId],\n    enabled: !!userId,\n  });\n\n  const isInWishlist = (productId: string) => {\n    return items.some((item: WishlistItemWithProduct) => item.productId === productId);\n  };\n\n  const addToWishlistMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest(\"POST\", \"/api/wishlist\", {\n        userId,\n        productId,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\", userId] });\n      toast({\n        title: \"Added to wishlist\",\n        description: \"Product has been added to your wishlist\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to wishlist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeFromWishlistMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      const item = items.find((item: WishlistItemWithProduct) => item.productId === productId);\n      if (item) {\n        await apiRequest(\"DELETE\", `/api/wishlist/${item.id}`);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\", userId] });\n      toast({\n        title: \"Removed from wishlist\",\n        description: \"Product has been removed from your wishlist\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove product from wishlist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const value: WishlistContextType = {\n    items,\n    isInWishlist,\n    addToWishlist: (productId: string) => addToWishlistMutation.mutateAsync(productId),\n    removeFromWishlist: (productId: string) => removeFromWishlistMutation.mutateAsync(productId),\n    isLoading,\n  };\n\n  return <WishlistContext.Provider value={value}>{children}</WishlistContext.Provider>;\n}\n\nexport function useWishlist() {\n  const context = useContext(WishlistContext);\n  if (context === undefined) {\n    throw new Error(\"useWishlist must be used within a WishlistProvider\");\n  }\n  return context;\n}\n","size_bytes":3010},"client/src/lib/constants.ts":{"content":"export const COLORS = {\n  forestGreen: '#228B22',\n  lightGreen: '#90EE90',\n  darkGreen: '#006400',\n  goldLight: '#F2D492',\n  goldDark: '#D4A017',\n  sageGreen: '#A8CABA',\n  berryRed: '#8D314A',\n  creamBeige: '#E3D5CA',\n} as const;\n\nexport const PRODUCT_CATEGORIES = {\n  serums: 'Serums & Oils',\n  makeup: 'Vegan Makeup',\n  kits: 'Skincare Kits',\n  supplements: 'Supplements',\n} as const;\n\nexport const SKIN_TYPES = {\n  dry: 'Dry',\n  oily: 'Oily',\n  combination: 'Combination',\n  sensitive: 'Sensitive',\n  normal: 'Normal',\n} as const;\n\nexport const SKIN_CONCERNS = {\n  aging: 'Anti-aging',\n  acne: 'Acne & Breakouts',\n  pigmentation: 'Dark Spots',\n  hydration: 'Dryness & Hydration',\n  dullness: 'Dullness',\n  sensitivity: 'Sensitivity',\n} as const;\n\nexport const SUSTAINABILITY_FEATURES = {\n  vegan: 'Vegan',\n  crueltyFree: 'Cruelty-Free',\n  organic: 'Organic',\n  recyclable: 'Recyclable Packaging',\n  carbonNeutral: 'Carbon Neutral',\n  fairTrade: 'Fair Trade',\n} as const;\n","size_bytes":974},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export interface CartItemWithProduct {\n  id: string;\n  userId?: string;\n  productId: string;\n  quantity: number;\n  createdAt: Date;\n  product?: {\n    id: string;\n    name: string;\n    price: string;\n    images: string[];\n    carbonFootprint: string;\n  };\n}\n\nexport interface WishlistItemWithProduct {\n  id: string;\n  userId?: string;\n  productId: string;\n  createdAt: Date;\n  product?: {\n    id: string;\n    name: string;\n    price: string;\n    images: string[];\n    rating: string;\n  };\n}\n\nexport interface QuizData {\n  skinType: string;\n  concerns: string[];\n  sustainability: string;\n  budget: string;\n  age?: string;\n  routineComplexity?: string;\n}\n\nexport interface ProductFilters {\n  category?: string;\n  skinType?: string;\n  concern?: string;\n  priceRange?: string;\n  features?: string[];\n  sortBy?: string;\n}\n\nexport interface SustainabilityStats {\n  treesPlanted: number;\n  co2Offset: number;\n  sustainablePackaging: number;\n  happyCustomers: number;\n}\n\nexport interface SearchSuggestion {\n  type: 'product' | 'category' | 'ingredient';\n  value: string;\n  label: string;\n}\n","size_bytes":1082},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/account.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, User, Heart, Package, Leaf, Settings, TreePine, Droplets, Edit2, Camera } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport ProductCard from \"@/components/product/product-card\";\nimport { useWishlist } from \"@/hooks/use-wishlist\";\nimport type { WishlistItemWithProduct } from \"@/lib/types\";\nimport type { Order, Product } from \"@shared/schema\";\n\nexport default function Account() {\n  const [activeSection, setActiveSection] = useState(\"profile\");\n  const { items: wishlistItems } = useWishlist();\n  \n  // Mock user data - in real app, this would come from authentication\n  const userData = {\n    id: \"demo-user\",\n    email: \"user@example.com\",\n    firstName: \"Emma\",\n    lastName: \"Johnson\",\n    profileImageUrl: \"\",\n    skinType: \"combination\",\n    skinConcerns: [\"aging\", \"hydration\"],\n    sustainabilityPreference: \"very\",\n    budget: \"medium\",\n    treesPlanted: 12,\n    co2Offset: \"8.5\",\n    createdAt: new Date(\"2024-01-15\"),\n    updatedAt: new Date(),\n  };\n\n  const { data: orders = [] } = useQuery({\n    queryKey: [\"/api/orders\", userData.id],\n  });\n\n  const sustainabilityStats = [\n    {\n      icon: <TreePine className=\"h-8 w-8\" />,\n      value: userData.treesPlanted,\n      label: \"Trees Planted\",\n      description: \"Through your purchases\",\n      color: \"text-[var(--forest-green)]\",\n      bgColor: \"bg-[var(--forest-green)]/10\"\n    },\n    {\n      icon: <Leaf className=\"h-8 w-8\" />,\n      value: `${userData.co2Offset}kg`,\n      label: \"CO2 Offset\",\n      description: \"Carbon neutralized\",\n      color: \"text-[var(--sage-green)]\",\n      bgColor: \"bg-[var(--sage-green)]/10\"\n    },\n    {\n      icon: <Droplets className=\"h-8 w-8\" />,\n      value: \"2,450L\",\n      label: \"Water Saved\",\n      description: \"Through sustainable choices\",\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\"\n    },\n    {\n      icon: <Package className=\"h-8 w-8\" />,\n      value: orders.length,\n      label: \"Eco Orders\",\n      description: \"Sustainable purchases\",\n      color: \"text-[var(--dark-green)]\",\n      bgColor: \"bg-[var(--dark-green)]/10\"\n    }\n  ];\n\n  const ecoLevel = Math.min(Math.floor((userData.treesPlanted + parseFloat(userData.co2Offset)) / 5), 10);\n  const ecoLevelNames = [\n    \"Eco Beginner\", \"Green Enthusiast\", \"Sustainability Advocate\", \n    \"Eco Warrior\", \"Planet Guardian\", \"Green Champion\", \n    \"Sustainability Master\", \"Eco Legend\", \"Green Guru\", \"Planet Hero\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Back Button */}\n        <Link href=\"/\">\n          <Button variant=\"ghost\" className=\"mb-6\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Home\n          </Button>\n        </Link>\n\n        {/* Profile Header */}\n        <div className=\"mb-8\">\n          <Card>\n            <CardContent className=\"p-8\">\n              <div className=\"flex flex-col md:flex-row items-center md:items-start gap-6\">\n                <div className=\"relative\">\n                  <Avatar className=\"h-24 w-24\">\n                    <AvatarImage src={userData.profileImageUrl} />\n                    <AvatarFallback className=\"text-2xl bg-[var(--sage-green)] text-white\">\n                      {userData.firstName[0]}{userData.lastName[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <Button\n                    size=\"sm\"\n                    className=\"absolute -bottom-2 -right-2 h-8 w-8 rounded-full p-0 bg-white border shadow-md hover:bg-gray-50\"\n                  >\n                    <Camera className=\"h-4 w-4 text-gray-600\" />\n                  </Button>\n                </div>\n                \n                <div className=\"flex-1 text-center md:text-left\">\n                  <h1 className=\"text-3xl font-serif font-bold text-[var(--dark-green)] mb-2\">\n                    {userData.firstName} {userData.lastName}\n                  </h1>\n                  <p className=\"text-gray-600 mb-4\">{userData.email}</p>\n                  \n                  <div className=\"flex flex-wrap gap-2 justify-center md:justify-start mb-4\">\n                    <Badge className=\"bg-[var(--sage-green)] text-white\">\n                      {userData.skinType} skin\n                    </Badge>\n                    <Badge className=\"bg-[var(--forest-green)] text-white\">\n                      {ecoLevelNames[ecoLevel]}\n                    </Badge>\n                    <Badge variant=\"outline\">\n                      Member since {userData.createdAt.getFullYear()}\n                    </Badge>\n                  </div>\n\n                  <div className=\"flex items-center gap-2 justify-center md:justify-start\">\n                    <div className=\"flex\">\n                      {[1, 2, 3, 4, 5].map((star) => (\n                        <Leaf\n                          key={star}\n                          className={`h-4 w-4 ${\n                            star <= ecoLevel / 2 \n                              ? \"text-[var(--forest-green)] fill-current\" \n                              : \"text-gray-300\"\n                          }`}\n                        />\n                      ))}\n                    </div>\n                    <span className=\"text-sm text-gray-600\">\n                      Eco Level {ecoLevel}/10\n                    </span>\n                  </div>\n                </div>\n\n                <Button className=\"bg-[var(--forest-green)] hover:bg-[var(--dark-green)]\">\n                  <Edit2 className=\"h-4 w-4 mr-2\" />\n                  Edit Profile\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sustainability Impact Overview */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-serif font-bold text-[var(--dark-green)] mb-4\">\n            Your Environmental Impact\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {sustainabilityStats.map((stat, index) => (\n              <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className={`w-16 h-16 ${stat.bgColor} rounded-full flex items-center justify-center mx-auto mb-4`}>\n                    <div className={stat.color}>\n                      {stat.icon}\n                    </div>\n                  </div>\n                  <div className={`text-2xl font-bold ${stat.color} mb-1`}>\n                    {stat.value}\n                  </div>\n                  <div className=\"font-semibold mb-1\">{stat.label}</div>\n                  <div className=\"text-sm text-gray-600\">{stat.description}</div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n            <TabsTrigger value=\"orders\">Orders ({orders.length})</TabsTrigger>\n            <TabsTrigger value=\"wishlist\">Wishlist ({wishlistItems.length})</TabsTrigger>\n            <TabsTrigger value=\"impact\">Sustainability</TabsTrigger>\n          </TabsList>\n\n          {/* Profile Tab */}\n          <TabsContent value=\"profile\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Personal Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input id=\"firstName\" defaultValue={userData.firstName} />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input id=\"lastName\" defaultValue={userData.lastName} />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input id=\"email\" type=\"email\" defaultValue={userData.email} />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input id=\"phone\" type=\"tel\" placeholder=\"+1 (555) 123-4567\" />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"address\">Address</Label>\n                    <Textarea id=\"address\" placeholder=\"Enter your address\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Skin Profile</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"skinType\">Skin Type</Label>\n                    <Select defaultValue={userData.skinType}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"dry\">Dry</SelectItem>\n                        <SelectItem value=\"oily\">Oily</SelectItem>\n                        <SelectItem value=\"combination\">Combination</SelectItem>\n                        <SelectItem value=\"sensitive\">Sensitive</SelectItem>\n                        <SelectItem value=\"normal\">Normal</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label>Main Skin Concerns</Label>\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\n                      {[\"aging\", \"acne\", \"pigmentation\", \"hydration\", \"dullness\", \"sensitivity\"].map((concern) => (\n                        <Badge\n                          key={concern}\n                          variant={userData.skinConcerns.includes(concern) ? \"default\" : \"outline\"}\n                          className={userData.skinConcerns.includes(concern) ? \"bg-[var(--sage-green)] text-white\" : \"\"}\n                        >\n                          {concern}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"budget\">Budget Range</Label>\n                    <Select defaultValue={userData.budget}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Under $50/month</SelectItem>\n                        <SelectItem value=\"medium\">$50-100/month</SelectItem>\n                        <SelectItem value=\"high\">$100+/month</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"sustainability\">Sustainability Priority</Label>\n                    <Select defaultValue={userData.sustainabilityPreference}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"very\">Very Important</SelectItem>\n                        <SelectItem value=\"somewhat\">Somewhat Important</SelectItem>\n                        <SelectItem value=\"not\">Not a Priority</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Button className=\"w-full bg-[var(--forest-green)] hover:bg-[var(--dark-green)]\">\n                    Update Profile\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Orders Tab */}\n          <TabsContent value=\"orders\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Order History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {orders.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {orders.map((order: Order) => (\n                      <div key={order.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"font-semibold\">Order #{order.id.slice(-8)}</h3>\n                            <p className=\"text-sm text-gray-600\">\n                              {new Date(order.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <Badge \n                            className={\n                              order.status === \"delivered\" ? \"bg-green-100 text-green-800\" :\n                              order.status === \"shipped\" ? \"bg-blue-100 text-blue-800\" :\n                              \"bg-yellow-100 text-yellow-800\"\n                            }\n                          >\n                            {order.status}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"text-sm text-gray-600 mb-2\">\n                          {order.items.length} {order.items.length === 1 ? \"item\" : \"items\"}\n                        </div>\n                        \n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"font-semibold\">${parseFloat(order.total).toFixed(2)}</span>\n                          <div className=\"flex items-center gap-2 text-sm text-[var(--forest-green)]\">\n                            <TreePine className=\"h-4 w-4\" />\n                            <span>{order.treesPlanted} trees planted</span>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No orders yet</h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      Start shopping for sustainable beauty products!\n                    </p>\n                    <Link href=\"/products\">\n                      <Button className=\"bg-[var(--forest-green)] hover:bg-[var(--dark-green)]\">\n                        Browse Products\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Wishlist Tab */}\n          <TabsContent value=\"wishlist\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Your Wishlist</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {wishlistItems.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {wishlistItems.map((item: WishlistItemWithProduct) => (\n                      item.product && (\n                        <ProductCard key={item.id} product={item.product as Product} />\n                      )\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Heart className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">Your wishlist is empty</h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      Save products you love for later!\n                    </p>\n                    <Link href=\"/products\">\n                      <Button className=\"bg-[var(--forest-green)] hover:bg-[var(--dark-green)]\">\n                        Discover Products\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Sustainability Impact Tab */}\n          <TabsContent value=\"impact\">\n            <div className=\"space-y-8\">\n              {/* Progress Towards Next Level */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Eco Level Progress</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span>Current Level: {ecoLevelNames[ecoLevel]}</span>\n                      <span>Level {ecoLevel}/10</span>\n                    </div>\n                    <Progress value={(ecoLevel / 10) * 100} className=\"h-3\" />\n                    <p className=\"text-sm text-gray-600\">\n                      {ecoLevel < 10 \n                        ? `Plant ${5 - (ecoLevel % 5)} more trees or offset ${5 - (ecoLevel % 5)}kg more CO2 to reach the next level!`\n                        : \"Congratulations! You've reached the maximum eco level!\"\n                      }\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Monthly Impact */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>This Month's Impact</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-[var(--forest-green)] mb-2\">3</div>\n                      <div className=\"text-sm text-gray-600\">Trees Planted</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-[var(--sage-green)] mb-2\">2.1kg</div>\n                      <div className=\"text-sm text-gray-600\">CO2 Offset</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-blue-600 mb-2\">450L</div>\n                      <div className=\"text-sm text-gray-600\">Water Saved</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Impact Timeline */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Your Sustainability Journey</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-4 p-3 bg-[var(--cream-beige)] rounded-lg\">\n                      <div className=\"w-10 h-10 bg-[var(--forest-green)] rounded-full flex items-center justify-center\">\n                        <TreePine className=\"h-5 w-5 text-white\" />\n                      </div>\n                      <div>\n                        <div className=\"font-semibold\">Planted 5 trees</div>\n                        <div className=\"text-sm text-gray-600\">Last order • 2 days ago</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-4 p-3 bg-[var(--cream-beige)] rounded-lg\">\n                      <div className=\"w-10 h-10 bg-[var(--sage-green)] rounded-full flex items-center justify-center\">\n                        <Leaf className=\"h-5 w-5 text-white\" />\n                      </div>\n                      <div>\n                        <div className=\"font-semibold\">Offset 3.2kg CO2</div>\n                        <div className=\"text-sm text-gray-600\">Carbon neutral shipping • 1 week ago</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-4 p-3 bg-[var(--cream-beige)] rounded-lg\">\n                      <div className=\"w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center\">\n                        <Droplets className=\"h-5 w-5 text-white\" />\n                      </div>\n                      <div>\n                        <div className=\"font-semibold\">Saved 800L water</div>\n                        <div className=\"text-sm text-gray-600\">Sustainable packaging choice • 2 weeks ago</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Badges and Achievements */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Eco Badges Earned</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div className=\"text-center p-4 border rounded-lg\">\n                      <div className=\"w-12 h-12 bg-[var(--forest-green)] rounded-full flex items-center justify-center mx-auto mb-2\">\n                        <TreePine className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <div className=\"text-sm font-semibold\">Tree Planter</div>\n                      <div className=\"text-xs text-gray-600\">10+ trees planted</div>\n                    </div>\n                    \n                    <div className=\"text-center p-4 border rounded-lg\">\n                      <div className=\"w-12 h-12 bg-[var(--sage-green)] rounded-full flex items-center justify-center mx-auto mb-2\">\n                        <Leaf className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <div className=\"text-sm font-semibold\">Carbon Warrior</div>\n                      <div className=\"text-xs text-gray-600\">5kg+ CO2 offset</div>\n                    </div>\n                    \n                    <div className=\"text-center p-4 border rounded-lg opacity-50\">\n                      <div className=\"w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center mx-auto mb-2\">\n                        <Package className=\"h-6 w-6 text-gray-500\" />\n                      </div>\n                      <div className=\"text-sm font-semibold\">Eco Shopper</div>\n                      <div className=\"text-xs text-gray-600\">25+ eco orders</div>\n                    </div>\n                    \n                    <div className=\"text-center p-4 border rounded-lg opacity-50\">\n                      <div className=\"w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center mx-auto mb-2\">\n                        <User className=\"h-6 w-6 text-gray-500\" />\n                      </div>\n                      <div className=\"text-sm font-semibold\">Influencer</div>\n                      <div className=\"text-xs text-gray-600\">Refer 5 friends</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23869},"client/src/pages/blog.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, Clock, Calendar, User, Tag, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport ProductCard from \"@/components/product/product-card\";\nimport type { BlogPost, Product } from \"@shared/schema\";\n\nexport default function Blog() {\n  const { slug } = useParams();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  const { data: blogPosts = [], isLoading: postsLoading } = useQuery<BlogPost[]>({\n    queryKey: [\"/api/blog\"],\n  });\n\n  const { data: currentPost, isLoading: postLoading } = useQuery<BlogPost>({\n    queryKey: [\"/api/blog\", slug],\n    enabled: !!slug,\n  });\n\n  const { data: relatedProducts = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    enabled: !!currentPost?.productIds?.length,\n  });\n\n  const categories = [\n    { value: \"all\", label: \"All Posts\" },\n    { value: \"skincare-science\", label: \"Skincare Science\" },\n    { value: \"makeup-trends\", label: \"Makeup Trends\" },\n    { value: \"sustainability\", label: \"Sustainability\" },\n    { value: \"ingredients\", label: \"Ingredients\" },\n    { value: \"tutorials\", label: \"Tutorials\" },\n  ];\n\n  const filteredPosts = blogPosts.filter((post: BlogPost) => {\n    const matchesSearch = searchQuery === \"\" || \n      post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      post.excerpt?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = selectedCategory === \"all\" || post.category === selectedCategory;\n    \n    return matchesSearch && matchesCategory;\n  });\n\n  const relatedProductsFiltered = relatedProducts.filter((product: Product) =>\n    currentPost?.productIds?.includes(product.id)\n  );\n\n  // If viewing a specific blog post\n  if (slug) {\n    if (postLoading) {\n      return (\n        <div className=\"min-h-screen bg-gray-50 pt-20\">\n          <div className=\"container mx-auto px-4 py-8\">\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"bg-gray-200 h-8 rounded mb-6 animate-pulse\" />\n              <div className=\"bg-gray-200 h-64 rounded-xl mb-8 animate-pulse\" />\n              <div className=\"space-y-4\">\n                <div className=\"bg-gray-200 h-4 rounded animate-pulse\" />\n                <div className=\"bg-gray-200 h-4 rounded animate-pulse\" />\n                <div className=\"bg-gray-200 h-4 rounded animate-pulse\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (!currentPost) {\n      return (\n        <div className=\"min-h-screen bg-gray-50 pt-20 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold mb-4\">Blog post not found</h1>\n            <Link href=\"/blog\">\n              <Button>Back to Blog</Button>\n            </Link>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"min-h-screen bg-gray-50 pt-20\">\n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Back Button */}\n          <Link href=\"/blog\">\n            <Button variant=\"ghost\" className=\"mb-6\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Blog\n            </Button>\n          </Link>\n\n          {/* Blog Post */}\n          <article className=\"max-w-4xl mx-auto\">\n            {/* Header */}\n            <header className=\"mb-8\">\n              <div className=\"flex items-center gap-4 mb-4\">\n                <Badge className=\"bg-[var(--sage-green)] text-white\">\n                  {currentPost.category}\n                </Badge>\n                <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                  <div className=\"flex items-center gap-1\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>{currentPost.createdAt ? new Date(currentPost.createdAt).toLocaleDateString() : 'Unknown date'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>{currentPost.readTime} min read</span>\n                  </div>\n                </div>\n              </div>\n              \n              <h1 className=\"text-4xl md:text-5xl font-serif font-bold text-[var(--dark-green)] mb-4\">\n                {currentPost.title}\n              </h1>\n              \n              {currentPost.excerpt && (\n                <p className=\"text-xl text-gray-600 leading-relaxed\">\n                  {currentPost.excerpt}\n                </p>\n              )}\n            </header>\n\n            {/* Featured Image */}\n            {currentPost.featuredImage && (\n              <div className=\"mb-8\">\n                <img\n                  src={currentPost.featuredImage}\n                  alt={currentPost.title}\n                  className=\"w-full h-64 md:h-96 object-cover rounded-xl\"\n                />\n              </div>\n            )}\n\n            {/* Content */}\n            <div className=\"prose prose-lg max-w-none mb-12\">\n              <div className=\"bg-white rounded-xl p-8 shadow-sm\">\n                <div className=\"whitespace-pre-wrap text-gray-700 leading-relaxed\">\n                  {currentPost.content}\n                </div>\n              </div>\n            </div>\n\n            {/* Related Products */}\n            {relatedProductsFiltered.length > 0 && (\n              <section className=\"mb-12\">\n                <h2 className=\"text-2xl font-serif font-bold text-[var(--dark-green)] mb-6\">\n                  Products Mentioned in This Article\n                </h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {relatedProductsFiltered.map((product: Product) => (\n                    <ProductCard key={product.id} product={product} />\n                  ))}\n                </div>\n              </section>\n            )}\n\n            {/* Share and Tags */}\n            <footer className=\"border-t pt-8\">\n              <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Tag className=\"h-4 w-4 text-gray-400\" />\n                  <div className=\"flex gap-2\">\n                    <Badge variant=\"outline\">{currentPost.category}</Badge>\n                    {currentPost.productIds && currentPost.productIds.length > 0 && (\n                      <Badge variant=\"outline\">Product Guide</Badge>\n                    )}\n                  </div>\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    if (navigator.share) {\n                      navigator.share({\n                        title: currentPost.title,\n                        text: currentPost.excerpt || '',\n                        url: window.location.href,\n                      });\n                    }\n                  }}\n                >\n                  Share Article\n                </Button>\n              </div>\n            </footer>\n          </article>\n        </div>\n      </div>\n    );\n  }\n\n  // Blog listing page\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-serif font-bold text-[var(--dark-green)] mb-6\">\n            Sustainable Beauty Insights\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Discover the latest trends, tips, and science behind clean beauty. \n            Learn how to create an eco-friendly routine that's good for you and the planet.\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6 mb-8\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search articles...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {categories.map((category) => (\n                  <SelectItem key={category.value} value={category.value}>\n                    {category.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Featured Posts */}\n        {selectedCategory === \"all\" && searchQuery === \"\" && (\n          <section className=\"mb-12\">\n            <h2 className=\"text-2xl font-serif font-bold text-[var(--dark-green)] mb-6\">\n              Featured Articles\n            </h2>\n            {postsLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"bg-gray-200 rounded-xl h-80 animate-pulse\" />\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {blogPosts\n                  .filter((post: BlogPost) => post.featured)\n                  .slice(0, 3)\n                  .map((post: BlogPost) => (\n                    <Link key={post.id} href={`/blog/${post.slug}`}>\n                      <Card className=\"overflow-hidden hover:shadow-xl transition-all cursor-pointer group h-full\">\n                        <div className=\"aspect-video overflow-hidden\">\n                          <img\n                            src={post.featuredImage || \"https://images.unsplash.com/photo-1512290923902-8a9f81dc236c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"}\n                            alt={post.title}\n                            className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                          />\n                        </div>\n                        <CardContent className=\"p-6 flex-1 flex flex-col\">\n                          <div className=\"flex items-center gap-4 mb-3 text-sm text-gray-600\">\n                            <Badge className=\"bg-[var(--sage-green)] text-white\">\n                              {post.category}\n                            </Badge>\n                            <div className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              <span>{post.readTime} min</span>\n                            </div>\n                          </div>\n                          \n                          <h3 className=\"text-xl font-bold mb-3 group-hover:text-[var(--forest-green)] transition-colors flex-1\">\n                            {post.title}\n                          </h3>\n                          \n                          <p className=\"text-gray-600 mb-4 line-clamp-3\">\n                            {post.excerpt}\n                          </p>\n                          \n                          <div className=\"flex items-center justify-between mt-auto\">\n                            <span className=\"text-sm text-gray-500\">\n                              {post.createdAt ? new Date(post.createdAt).toLocaleDateString() : 'Unknown date'}\n                            </span>\n                            <span className=\"text-[var(--forest-green)] font-semibold hover:text-[var(--dark-green)]\">\n                              Read More →\n                            </span>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </Link>\n                  ))}\n              </div>\n            )}\n          </section>\n        )}\n\n        {/* All Posts */}\n        <section>\n          <h2 className=\"text-2xl font-serif font-bold text-[var(--dark-green)] mb-6\">\n            {selectedCategory === \"all\" ? \"Latest Articles\" : categories.find(c => c.value === selectedCategory)?.label}\n          </h2>\n          \n          {postsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[1, 2, 3, 4, 5, 6].map((i) => (\n                <div key={i} className=\"bg-gray-200 rounded-xl h-80 animate-pulse\" />\n              ))}\n            </div>\n          ) : filteredPosts.length > 0 ? (\n            <>\n              <div className=\"mb-6 text-sm text-gray-600\">\n                Showing {filteredPosts.length} articles\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {filteredPosts.map((post: BlogPost) => (\n                  <Link key={post.id} href={`/blog/${post.slug}`}>\n                    <Card className=\"overflow-hidden hover:shadow-xl transition-all cursor-pointer group h-full\">\n                      <div className=\"aspect-video overflow-hidden\">\n                        <img\n                          src={post.featuredImage || \"https://images.unsplash.com/photo-1512290923902-8a9f81dc236c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"}\n                          alt={post.title}\n                          className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                        />\n                      </div>\n                      <CardContent className=\"p-6 flex-1 flex flex-col\">\n                        <div className=\"flex items-center gap-4 mb-3 text-sm text-gray-600\">\n                          <Badge className=\"bg-[var(--sage-green)] text-white\">\n                            {post.category}\n                          </Badge>\n                          <div className=\"flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            <span>{post.readTime} min</span>\n                          </div>\n                        </div>\n                        \n                        <h3 className=\"text-xl font-bold mb-3 group-hover:text-[var(--forest-green)] transition-colors flex-1\">\n                          {post.title}\n                        </h3>\n                        \n                        <p className=\"text-gray-600 mb-4 line-clamp-3\">\n                          {post.excerpt}\n                        </p>\n                        \n                        <div className=\"flex items-center justify-between mt-auto\">\n                          <span className=\"text-sm text-gray-500\">\n                            {post.createdAt ? new Date(post.createdAt).toLocaleDateString() : 'Unknown date'}\n                          </span>\n                          <span className=\"text-[var(--forest-green)] font-semibold hover:text-[var(--dark-green)]\">\n                            Read More →\n                          </span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </Link>\n                ))}\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-12\">\n              <div className=\"w-24 h-24 bg-gray-100 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                <Search className=\"h-12 w-12 text-gray-400\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">No articles found</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Try adjusting your search terms or category filter.\n              </p>\n              <Button \n                onClick={() => {\n                  setSearchQuery(\"\");\n                  setSelectedCategory(\"all\");\n                }}\n                variant=\"outline\"\n              >\n                Clear Filters\n              </Button>\n            </div>\n          )}\n        </section>\n\n        {/* Newsletter CTA */}\n        <section className=\"mt-16 text-center bg-[var(--cream-beige)] rounded-2xl p-12\">\n          <h2 className=\"text-3xl font-serif font-bold text-[var(--dark-green)] mb-4\">\n            Stay Updated on Sustainable Beauty\n          </h2>\n          <p className=\"text-lg text-gray-700 mb-8 max-w-2xl mx-auto\">\n            Get the latest articles, tips, and product recommendations delivered to your inbox.\n          </p>\n          <div className=\"flex flex-col md:flex-row gap-4 justify-center max-w-md mx-auto\">\n            <Input \n              type=\"email\" \n              placeholder=\"Enter your email\" \n              className=\"flex-1\"\n            />\n            <Button className=\"bg-[var(--forest-green)] hover:bg-[var(--dark-green)]\">\n              Subscribe\n            </Button>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17406},"client/src/pages/cart.tsx":{"content":"import { Link } from \"wouter\";\nimport { ArrowLeft, ShoppingBag, Trash2, Plus, Minus, Truck, Leaf, CreditCard } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useState } from \"react\";\n\nexport default function Cart() {\n  const { items, total, updateQuantity, removeFromCart, clearCart, itemCount } = useCart();\n  const [shippingType, setShippingType] = useState(\"standard\");\n  const [promoCode, setPromoCode] = useState(\"\");\n\n  const shippingOptions = [\n    {\n      value: \"standard\",\n      label: \"Standard Shipping (Carbon Neutral)\",\n      price: 5,\n      time: \"5-7 business days\",\n      icon: <Leaf className=\"h-4 w-4\" />,\n      description: \"Free carbon offset included\"\n    },\n    {\n      value: \"express\",\n      label: \"Express Shipping (Green)\",\n      price: 15,\n      time: \"2-3 business days\",\n      icon: <Truck className=\"h-4 w-4\" />,\n      description: \"Expedited with carbon offset\"\n    },\n    {\n      value: \"overnight\",\n      label: \"Overnight (Premium Green)\",\n      price: 25,\n      time: \"Next business day\",\n      icon: <Truck className=\"h-4 w-4\" />,\n      description: \"Fastest option with environmental protection\"\n    }\n  ];\n\n  const selectedShipping = shippingOptions.find(option => option.value === shippingType);\n  const shippingCost = selectedShipping?.price || 0;\n  const subtotal = total;\n  const carbonOffset = 0; // Free\n  const promoDiscount = 0; // TODO: Implement promo code logic\n  const finalTotal = subtotal + shippingCost - promoDiscount;\n\n  // Sustainability calculations\n  const treesPlanted = Math.floor(finalTotal / 30) + 1;\n  const co2Offset = treesPlanted * 0.6;\n\n  const handleQuantityChange = async (itemId: string, newQuantity: number) => {\n    if (newQuantity <= 0) {\n      await removeFromCart(itemId);\n    } else {\n      await updateQuantity(itemId, newQuantity);\n    }\n  };\n\n  const handlePromoCode = () => {\n    // TODO: Implement promo code validation\n    console.log(\"Applying promo code:\", promoCode);\n  };\n\n  if (items.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 pt-20\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <div className=\"w-24 h-24 bg-gray-100 rounded-full mx-auto mb-6 flex items-center justify-center\">\n              <ShoppingBag className=\"h-12 w-12 text-gray-400\" />\n            </div>\n            <h1 className=\"text-3xl font-serif font-bold text-[var(--dark-green)] mb-4\">\n              Your cart is empty\n            </h1>\n            <p className=\"text-gray-600 mb-8\">\n              Looks like you haven't added any sustainable beauty products yet. \n              Start shopping and make a positive impact!\n            </p>\n            <div className=\"flex flex-col md:flex-row gap-4 justify-center\">\n              <Link href=\"/products\">\n                <Button size=\"lg\" className=\"bg-[var(--forest-green)] hover:bg-[var(--dark-green)]\">\n                  Browse Products\n                </Button>\n              </Link>\n              <Link href=\"/quiz\">\n                <Button size=\"lg\" variant=\"outline\" className=\"border-[var(--sage-green)] text-[var(--sage-green)]\">\n                  Take Skin Quiz\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Back Button */}\n        <Link href=\"/products\">\n          <Button variant=\"ghost\" className=\"mb-6\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Continue Shopping\n          </Button>\n        </Link>\n\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-serif font-bold text-[var(--dark-green)] mb-2\">\n            Shopping Cart\n          </h1>\n          <p className=\"text-gray-600\">\n            {itemCount} {itemCount === 1 ? \"item\" : \"items\"} in your cart\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Cart Items */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            {items.map((item) => (\n              <Card key={item.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex gap-4\">\n                    <img\n                      src={item.product?.images[0] || \"/placeholder-product.jpg\"}\n                      alt={item.product?.name}\n                      className=\"w-24 h-24 object-cover rounded-lg\"\n                    />\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <Link href={`/product/${item.productId}`}>\n                        <h3 className=\"font-semibold text-lg hover:text-[var(--forest-green)] transition-colors mb-1\">\n                          {item.product?.name}\n                        </h3>\n                      </Link>\n                      \n                      <p className=\"text-gray-600 mb-2\">\n                        ${item.product?.price} each\n                      </p>\n                      \n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <span className=\"text-sm text-gray-500\">Carbon footprint:</span>\n                        <span className=\"text-sm text-[var(--forest-green)]\">\n                          {item.product?.carbonFootprint}kg CO2e\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleQuantityChange(item.id, item.quantity - 1)}\n                            className=\"h-8 w-8 p-0\"\n                          >\n                            <Minus className=\"h-3 w-3\" />\n                          </Button>\n                          <span className=\"min-w-[3rem] text-center font-medium\">\n                            {item.quantity}\n                          </span>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleQuantityChange(item.id, item.quantity + 1)}\n                            className=\"h-8 w-8 p-0\"\n                          >\n                            <Plus className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                        \n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeFromCart(item.id)}\n                          className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-1\" />\n                          Remove\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-semibold text-[var(--forest-green)]\">\n                        ${(parseFloat(item.product?.price || \"0\") * item.quantity).toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n\n            {/* Clear Cart */}\n            <div className=\"flex justify-end\">\n              <Button\n                variant=\"outline\"\n                onClick={clearCart}\n                className=\"text-red-500 border-red-200 hover:bg-red-50\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Clear Cart\n              </Button>\n            </div>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-24\">\n              <CardHeader>\n                <CardTitle className=\"text-xl\">Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Subtotal */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal</span>\n                    <span>${subtotal.toFixed(2)}</span>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Shipping Options */}\n                <div>\n                  <h3 className=\"font-semibold mb-3\">Shipping Options</h3>\n                  <RadioGroup value={shippingType} onValueChange={setShippingType}>\n                    {shippingOptions.map((option) => (\n                      <Label\n                        key={option.value}\n                        className=\"flex items-start gap-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50\"\n                      >\n                        <RadioGroupItem value={option.value} className=\"mt-1\" />\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            {option.icon}\n                            <span className=\"font-medium\">{option.label}</span>\n                          </div>\n                          <div className=\"text-sm text-gray-600 mb-1\">\n                            {option.time} • ${option.price}\n                          </div>\n                          <div className=\"text-xs text-[var(--forest-green)]\">\n                            {option.description}\n                          </div>\n                        </div>\n                      </Label>\n                    ))}\n                  </RadioGroup>\n                </div>\n\n                <Separator />\n\n                {/* Promo Code */}\n                <div>\n                  <h3 className=\"font-semibold mb-3\">Promo Code</h3>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Enter code\"\n                      value={promoCode}\n                      onChange={(e) => setPromoCode(e.target.value)}\n                    />\n                    <Button onClick={handlePromoCode} variant=\"outline\">\n                      Apply\n                    </Button>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Cost Breakdown */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal</span>\n                    <span>${subtotal.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Shipping</span>\n                    <span>${shippingCost.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-[var(--forest-green)]\">\n                    <span>Carbon Offset</span>\n                    <span>Free</span>\n                  </div>\n                  {promoDiscount > 0 && (\n                    <div className=\"flex justify-between text-[var(--forest-green)]\">\n                      <span>Promo Discount</span>\n                      <span>-${promoDiscount.toFixed(2)}</span>\n                    </div>\n                  )}\n                </div>\n\n                <Separator />\n\n                {/* Total */}\n                <div className=\"flex justify-between text-lg font-bold\">\n                  <span>Total</span>\n                  <span className=\"text-[var(--forest-green)]\">${finalTotal.toFixed(2)}</span>\n                </div>\n\n                {/* Sustainability Impact */}\n                <div className=\"bg-[var(--cream-beige)] rounded-lg p-4\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Leaf className=\"h-5 w-5 text-[var(--forest-green)]\" />\n                    <span className=\"font-semibold\">Your Eco Impact</span>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4 text-center\">\n                    <div>\n                      <div className=\"text-lg font-bold text-[var(--forest-green)]\">\n                        {treesPlanted}\n                      </div>\n                      <div className=\"text-xs text-gray-600\">\n                        {treesPlanted === 1 ? \"Tree\" : \"Trees\"} Planted\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-lg font-bold text-[var(--forest-green)]\">\n                        {co2Offset.toFixed(1)}kg\n                      </div>\n                      <div className=\"text-xs text-gray-600\">CO2 Offset</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Checkout Button */}\n                <Button\n                  size=\"lg\"\n                  className=\"w-full bg-[var(--berry-red)] hover:bg-red-700 text-white\"\n                >\n                  <CreditCard className=\"h-5 w-5 mr-2\" />\n                  Proceed to Checkout\n                </Button>\n\n                {/* Security Notice */}\n                <div className=\"text-center text-sm text-gray-500\">\n                  <div className=\"flex items-center justify-center gap-1 mb-1\">\n                    <span>🔒</span>\n                    <span>Secure checkout</span>\n                  </div>\n                  <span>SSL encrypted • PCI compliant</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14008},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ChevronDown, Leaf, FlaskConical, Star } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport ProductCard from \"@/components/product/product-card\";\nimport QuizModal from \"@/components/quiz/quiz-modal\";\nimport ImpactStats from \"@/components/sustainability/impact-stats\";\nimport type { Product, BlogPost } from \"@shared/schema\";\n\nexport default function Home() {\n  const [isQuizOpen, setIsQuizOpen] = useState(false);\n  const [email, setEmail] = useState(\"\");\n\n  const { data: featuredProducts = [], isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products?featured=true\"],\n  });\n\n  const { data: trendingProducts = [], isLoading: trendingLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products?trending=true\"],\n  });\n\n  const { data: blogPosts = [], isLoading: blogLoading } = useQuery<BlogPost[]>({\n    queryKey: [\"/api/blog?featured=true\"],\n  });\n\n  const handleNewsletterSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // TODO: Implement newsletter signup\n    console.log(\"Newsletter signup:\", email);\n    setEmail(\"\");\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative h-screen flex items-center justify-center text-white overflow-hidden\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center bg-fixed\"\n          style={{\n            backgroundImage: `linear-gradient(rgba(34, 139, 34, 0.3), rgba(34, 139, 34, 0.3)), url('https://images.unsplash.com/photo-1556228453-efd6c1ff04f6?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080')`\n          }}\n        />\n        \n        <div className=\"relative z-10 text-center max-w-4xl px-4\">\n          <h1 className=\"text-5xl md:text-7xl font-serif font-bold mb-6 animate-fade-in\">\n            Sustainable Beauty for 2025\n          </h1>\n          <p className=\"text-xl md:text-2xl mb-8 opacity-90\">\n            Plant-powered skincare with bakuchiol serums, vegan makeup, and eco-friendly formulations\n          </p>\n          <div className=\"flex flex-col md:flex-row gap-4 justify-center\">\n            <Button\n              size=\"lg\"\n              onClick={() => setIsQuizOpen(true)}\n              className=\"bg-[var(--berry-red)] hover:bg-red-700 text-white px-8 py-4 text-lg font-semibold transform hover:scale-105 transition-all\"\n            >\n              Discover Your Routine\n            </Button>\n            <Link href=\"/products\">\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                className=\"border-2 border-white hover:bg-white hover:text-[var(--forest-green)] text-white px-8 py-4 text-lg font-semibold transform hover:scale-105 transition-all\"\n              >\n                Shop Trending Products\n              </Button>\n            </Link>\n          </div>\n        </div>\n        \n        {/* Scroll indicator */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 text-white\">\n          <ChevronDown className=\"h-8 w-8 animate-bounce\" />\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-16 bg-[var(--cream-beige)]\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-serif font-bold text-[var(--dark-green)] mb-4\">\n              Trending 2025 Products\n            </h2>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Discover our bestselling sustainable skincare featuring bakuchiol serums, vegan makeup, and eco-friendly kits\n            </p>\n          </div>\n          \n          {productsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"bg-gray-200 rounded-xl h-96 animate-pulse\" />\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {featuredProducts.slice(0, 4).map((product: Product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n          )}\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/products\">\n              <Button size=\"lg\" className=\"bg-[var(--forest-green)] hover:bg-[var(--dark-green)]\">\n                View All Products\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Sustainability Impact */}\n      <ImpactStats />\n\n      {/* Product Quiz CTA */}\n      <section className=\"py-16 bg-[var(--sage-green)]\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"text-4xl font-serif font-bold text-[var(--dark-green)] mb-6\">\n              Find Your Perfect Routine\n            </h2>\n            <p className=\"text-xl text-gray-700 mb-8\">\n              Take our AI-powered quiz to get personalized product recommendations based on your skin type, concerns, and sustainability preferences\n            </p>\n            \n            <div className=\"bg-white rounded-2xl p-8 shadow-lg\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-[var(--forest-green)] rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <FlaskConical className=\"text-white h-8 w-8\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold mb-2\">Skin Analysis</h3>\n                  <p className=\"text-gray-600\">AI-powered assessment of your skin type and concerns</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-[var(--forest-green)] rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Leaf className=\"text-white h-8 w-8\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold mb-2\">Eco Preferences</h3>\n                  <p className=\"text-gray-600\">Match products to your sustainability values</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-[var(--forest-green)] rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Star className=\"text-white h-8 w-8\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold mb-2\">Custom Bundle</h3>\n                  <p className=\"text-gray-600\">Receive a personalized routine with exclusive discounts</p>\n                </div>\n              </div>\n              \n              <Button\n                size=\"lg\"\n                onClick={() => setIsQuizOpen(true)}\n                className=\"bg-[var(--berry-red)] hover:bg-red-700 text-white px-12 py-4 text-xl font-semibold transform hover:scale-105 transition-all\"\n              >\n                Start Your 2-Minute Quiz\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Blog Preview */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-serif font-bold text-[var(--dark-green)] mb-4\">\n              Sustainable Beauty Insights\n            </h2>\n            <p className=\"text-lg text-gray-600\">Latest trends, tips, and science behind clean beauty</p>\n          </div>\n          \n          {blogLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"bg-gray-200 rounded-xl h-80 animate-pulse\" />\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {blogPosts.slice(0, 3).map((post: BlogPost) => (\n                <Link key={post.id} href={`/blog/${post.slug}`}>\n                  <Card className=\"overflow-hidden hover:shadow-xl transition-all cursor-pointer group\">\n                    <div className=\"aspect-video overflow-hidden\">\n                      <img\n                        src={post.featuredImage || \"https://images.unsplash.com/photo-1512290923902-8a9f81dc236c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"}\n                        alt={post.title}\n                        className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                      />\n                    </div>\n                    <CardContent className=\"p-6\">\n                      <div className=\"text-sm text-[var(--forest-green)] font-semibold mb-2 uppercase tracking-wide\">\n                        {post.category}\n                      </div>\n                      <h3 className=\"text-xl font-bold mb-3 group-hover:text-[var(--forest-green)] transition-colors\">\n                        {post.title}\n                      </h3>\n                      <p className=\"text-gray-600 mb-4\">{post.excerpt}</p>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-500\">{post.readTime} min read</span>\n                        <span className=\"text-[var(--forest-green)] font-semibold hover:text-[var(--dark-green)]\">\n                          Read More →\n                        </span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n          )}\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/blog\">\n              <Button size=\"lg\" variant=\"outline\" className=\"border-[var(--forest-green)] text-[var(--forest-green)] hover:bg-[var(--forest-green)] hover:text-white\">\n                Read More Articles\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Newsletter Signup */}\n      <section className=\"py-16 bg-[var(--dark-green)] text-white\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl font-serif font-bold mb-4\">Join the Sustainable Beauty Movement</h2>\n          <p className=\"text-xl opacity-90 mb-8 max-w-2xl mx-auto\">\n            Get exclusive eco-tips, early access to new products, and 10% off your first purchase\n          </p>\n          \n          <form onSubmit={handleNewsletterSubmit} className=\"max-w-md mx-auto flex flex-col md:flex-row gap-4\">\n            <Input\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              className=\"flex-1 bg-white text-gray-800 border-0\"\n            />\n            <Button\n              type=\"submit\"\n              className=\"bg-[var(--berry-red)] hover:bg-red-700 px-8 py-3 font-semibold\"\n            >\n              Subscribe & Save\n            </Button>\n          </form>\n          \n          <p className=\"text-sm opacity-75 mt-4\">Join 25,000+ eco-conscious beauty enthusiasts. Unsubscribe anytime.</p>\n        </div>\n      </section>\n\n      {/* Quiz Modal */}\n      <QuizModal isOpen={isQuizOpen} onClose={() => setIsQuizOpen(false)} />\n    </div>\n  );\n}\n","size_bytes":11592},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/product-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Star, Heart, ShoppingCart, Share2, Truck, Leaf, Shield, ArrowLeft, Camera } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport ProductCard from \"@/components/product/product-card\";\nimport ProductGallery from \"@/components/product/product-gallery\";\nimport ARTryOn from \"@/components/ar/ar-try-on\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useWishlist } from \"@/hooks/use-wishlist\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function ProductDetail() {\n  const { id } = useParams();\n  const [quantity, setQuantity] = useState(1);\n  const [isAROpen, setIsAROpen] = useState(false);\n  const { addToCart } = useCart();\n  const { isInWishlist, addToWishlist, removeFromWishlist } = useWishlist();\n  const { toast } = useToast();\n\n  const { data: product, isLoading } = useQuery<Product>({\n    queryKey: [\"/api/products\", id],\n    enabled: !!id,\n  });\n\n  const { data: relatedProducts = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    enabled: !!product?.category,\n  });\n\n  const isWishlisted = product ? isInWishlist(product.id) : false;\n\n  const handleAddToCart = async () => {\n    if (!product) return;\n    \n    try {\n      await addToCart(product.id, quantity);\n    } catch (error) {\n      console.error(\"Failed to add to cart:\", error);\n    }\n  };\n\n  const handleWishlistToggle = async () => {\n    if (!product) return;\n    \n    try {\n      if (isWishlisted) {\n        await removeFromWishlist(product.id);\n      } else {\n        await addToWishlist(product.id);\n      }\n    } catch (error) {\n      console.error(\"Failed to update wishlist:\", error);\n    }\n  };\n\n  const handleShare = async () => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: product?.name,\n          text: product?.description,\n          url: window.location.href,\n        });\n      } catch (error) {\n        console.error(\"Failed to share:\", error);\n      }\n    } else {\n      navigator.clipboard.writeText(window.location.href);\n      toast({\n        title: \"Link copied\",\n        description: \"Product link has been copied to clipboard\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 pt-20\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            <div className=\"bg-gray-200 aspect-square rounded-xl animate-pulse\" />\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-200 h-8 rounded animate-pulse\" />\n              <div className=\"bg-gray-200 h-6 rounded animate-pulse\" />\n              <div className=\"bg-gray-200 h-4 rounded animate-pulse\" />\n              <div className=\"bg-gray-200 h-32 rounded animate-pulse\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 pt-20 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Product not found</h1>\n          <Link href=\"/products\">\n            <Button>Back to Products</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const relatedProductsFiltered = relatedProducts\n    .filter((p: Product) => p.id !== product.id)\n    .slice(0, 4);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Breadcrumb */}\n        <div className=\"flex items-center gap-2 mb-8 text-sm text-gray-600\">\n          <Link href=\"/products\" className=\"hover:text-[var(--forest-green)]\">\n            Products\n          </Link>\n          <span>/</span>\n          <Link href={`/products/${product.category}`} className=\"hover:text-[var(--forest-green)]\">\n            {product.category}\n          </Link>\n          <span>/</span>\n          <span className=\"text-gray-900\">{product.name}</span>\n        </div>\n\n        {/* Back Button */}\n        <Link href=\"/products\">\n          <Button variant=\"ghost\" className=\"mb-6\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Products\n          </Button>\n        </Link>\n\n        {/* Product Details */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16\">\n          {/* Product Gallery */}\n          <div>\n            <ProductGallery images={product.images || []} productName={product.name} />\n          </div>\n\n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            {/* Badges */}\n            <div className=\"flex flex-wrap gap-2\">\n              {product.isVegan && (\n                <Badge className=\"bg-[var(--sage-green)] text-white\">Vegan</Badge>\n              )}\n              {product.isCrueltyFree && (\n                <Badge className=\"bg-[var(--sage-green)] text-white\">Cruelty-Free</Badge>\n              )}\n              {product.isOrganic && (\n                <Badge className=\"bg-[var(--sage-green)] text-white\">Organic</Badge>\n              )}\n              {product.trending && (\n                <Badge className=\"bg-[var(--gold-light)] text-[var(--dark-green)]\">Trending</Badge>\n              )}\n            </div>\n\n            {/* Rating */}\n            <div className=\"flex items-center gap-2\">\n              <div className=\"flex\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <Star\n                    key={star}\n                    className={`h-5 w-5 ${\n                      star <= Math.floor(parseFloat(product.rating || '0'))\n                        ? \"text-yellow-400 fill-current\"\n                        : \"text-gray-300\"\n                    }`}\n                  />\n                ))}\n              </div>\n              <span className=\"text-sm text-gray-600\">\n                {product.rating} ({product.reviewCount} reviews)\n              </span>\n            </div>\n\n            {/* Title and Price */}\n            <div>\n              <h1 className=\"text-3xl font-serif font-bold text-[var(--dark-green)] mb-2\">\n                {product.name}\n              </h1>\n              <div className=\"text-4xl font-bold text-[var(--forest-green)] mb-4\">\n                ${product.price}\n              </div>\n            </div>\n\n            {/* Description */}\n            <p className=\"text-gray-700 leading-relaxed\">{product.description}</p>\n\n            {/* Key Benefits */}\n            {product.benefits && product.benefits.length > 0 && (\n              <div>\n                <h3 className=\"font-semibold mb-2\">Key Benefits:</h3>\n                <ul className=\"list-disc list-inside text-gray-700 space-y-1\">\n                  {product.benefits.map((benefit) => (\n                    <li key={benefit}>{benefit}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {/* Quantity and Add to Cart */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-4\">\n                <label className=\"font-semibold\">Quantity:</label>\n                <div className=\"flex items-center border rounded-lg\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                    className=\"px-3\"\n                  >\n                    -\n                  </Button>\n                  <span className=\"px-4 py-2 min-w-[3rem] text-center\">{quantity}</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setQuantity(quantity + 1)}\n                    className=\"px-3\"\n                  >\n                    +\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex gap-4\">\n                <Button\n                  size=\"lg\"\n                  onClick={handleAddToCart}\n                  className=\"flex-1 bg-[var(--forest-green)] hover:bg-[var(--dark-green)]\"\n                >\n                  <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                  Add to Cart - ${(parseFloat(product.price) * quantity).toFixed(2)}\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  onClick={handleWishlistToggle}\n                  className={`${isWishlisted ? \"text-red-500 border-red-200\" : \"\"}`}\n                >\n                  <Heart className={`h-5 w-5 ${isWishlisted ? \"fill-current\" : \"\"}`} />\n                </Button>\n\n                <Button variant=\"outline\" size=\"lg\" onClick={handleShare}>\n                  <Share2 className=\"h-5 w-5\" />\n                </Button>\n              </div>\n\n              {/* AR Try-On for makeup products */}\n              {product.category === \"makeup\" && (\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  onClick={() => setIsAROpen(true)}\n                  className=\"w-full border-[var(--sage-green)] text-[var(--sage-green)] hover:bg-[var(--sage-green)] hover:text-white\"\n                >\n                  <Camera className=\"h-5 w-5 mr-2\" />\n                  Try On with AR\n                </Button>\n              )}\n            </div>\n\n            {/* Features */}\n            <div className=\"grid grid-cols-3 gap-4 pt-6 border-t\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Leaf className=\"h-4 w-4 text-[var(--forest-green)]\" />\n                <span>Eco-Friendly</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Truck className=\"h-4 w-4 text-[var(--forest-green)]\" />\n                <span>Free Shipping</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Shield className=\"h-4 w-4 text-[var(--forest-green)]\" />\n                <span>30-Day Return</span>\n              </div>\n            </div>\n\n            {/* Sustainability Score */}\n            {product.sustainabilityScore && product.sustainabilityScore > 0 && (\n              <div className=\"bg-[var(--cream-beige)] rounded-lg p-4\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Leaf className=\"h-5 w-5 text-[var(--forest-green)]\" />\n                  <span className=\"font-semibold\">Sustainability Score</span>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n                    <div\n                      className=\"bg-[var(--forest-green)] h-2 rounded-full\"\n                      style={{ width: `${product.sustainabilityScore}%` }}\n                    />\n                  </div>\n                  <span className=\"text-sm font-medium\">{product.sustainabilityScore}%</span>\n                </div>\n                <p className=\"text-sm text-gray-600 mt-2\">\n                  Carbon footprint: {product.carbonFootprint}kg CO2e per product\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Product Details Tabs */}\n        <div className=\"mb-16\">\n          <Tabs defaultValue=\"details\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"details\">Product Details</TabsTrigger>\n              <TabsTrigger value=\"ingredients\">Ingredients</TabsTrigger>\n              <TabsTrigger value=\"reviews\">Reviews</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"details\" className=\"mt-6\">\n              <div className=\"bg-white rounded-lg p-6\">\n                <Accordion type=\"single\" collapsible>\n                  <AccordionItem value=\"description\">\n                    <AccordionTrigger>Full Description</AccordionTrigger>\n                    <AccordionContent>\n                      <p className=\"text-gray-700 leading-relaxed mb-4\">\n                        {product.description}\n                      </p>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Suitable for:</h4>\n                          <ul className=\"text-sm text-gray-600 space-y-1\">\n                            {product.skinTypes && product.skinTypes.map((type) => (\n                              <li key={type}>{type} skin</li>\n                            ))}\n                          </ul>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Addresses:</h4>\n                          <ul className=\"text-sm text-gray-600 space-y-1\">\n                            {product.concerns && product.concerns.map((concern) => (\n                              <li key={concern}>{concern}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n                  \n                  <AccordionItem value=\"usage\">\n                    <AccordionTrigger>How to Use</AccordionTrigger>\n                    <AccordionContent>\n                      <p className=\"text-gray-700\">\n                        Apply 2-3 drops to clean skin. Gently massage into face and neck. \n                        Use morning and evening for best results. Always follow with SPF during the day.\n                      </p>\n                    </AccordionContent>\n                  </AccordionItem>\n                  \n                  <AccordionItem value=\"sustainability\">\n                    <AccordionTrigger>Sustainability</AccordionTrigger>\n                    <AccordionContent>\n                      <div className=\"space-y-3\">\n                        <p className=\"text-gray-700\">\n                          This product is part of our commitment to sustainable beauty:\n                        </p>\n                        <ul className=\"list-disc list-inside text-gray-700 space-y-1\">\n                          <li>Packaging made from 100% recyclable materials</li>\n                          <li>Carbon-neutral shipping</li>\n                          <li>Ethically sourced ingredients</li>\n                          <li>No harmful chemicals or parabens</li>\n                        </ul>\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n                </Accordion>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"ingredients\" className=\"mt-6\">\n              <div className=\"bg-white rounded-lg p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">All Ingredients</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {product.ingredients && product.ingredients.map((ingredient) => (\n                    <div key={ingredient} className=\"flex items-center gap-2 p-2 border rounded\">\n                      <Leaf className=\"h-4 w-4 text-[var(--forest-green)]\" />\n                      <span className=\"text-sm\">{ingredient}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"reviews\" className=\"mt-6\">\n              <div className=\"bg-white rounded-lg p-6\">\n                <div className=\"text-center py-8\">\n                  <h3 className=\"text-lg font-semibold mb-2\">Customer Reviews</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    See what our customers are saying about this product\n                  </p>\n                  <div className=\"flex items-center justify-center gap-2 mb-4\">\n                    <div className=\"flex\">\n                      {[1, 2, 3, 4, 5].map((star) => (\n                        <Star\n                          key={star}\n                          className=\"h-6 w-6 text-yellow-400 fill-current\"\n                        />\n                      ))}\n                    </div>\n                    <span className=\"text-lg font-semibold\">{product.rating}</span>\n                    <span className=\"text-gray-600\">({product.reviewCount} reviews)</span>\n                  </div>\n                  <Button variant=\"outline\">Write a Review</Button>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        {/* Related Products */}\n        {relatedProductsFiltered.length > 0 && (\n          <div>\n            <h2 className=\"text-3xl font-serif font-bold text-[var(--dark-green)] mb-8\">\n              You Might Also Like\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {relatedProductsFiltered.map((relatedProduct: Product) => (\n                <ProductCard key={relatedProduct.id} product={relatedProduct} />\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* AR Try-On Modal */}\n      <ARTryOn \n        isOpen={isAROpen} \n        onClose={() => setIsAROpen(false)} \n        product={product}\n      />\n    </div>\n  );\n}\n","size_bytes":17664},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Filter, Grid, List, SlidersHorizontal } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport ProductCard from \"@/components/product/product-card\";\nimport { PRODUCT_CATEGORIES, SKIN_TYPES, SKIN_CONCERNS } from \"@/lib/constants\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function Products() {\n  const { category } = useParams();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"featured\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [filters, setFilters] = useState({\n    skinTypes: [] as string[],\n    concerns: [] as string[],\n    features: [] as string[],\n    priceRange: \"\",\n  });\n\n  const { data: allProducts = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  const { data: searchResults = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products/search\", searchQuery],\n    enabled: searchQuery.length > 2,\n  });\n\n  const products = searchQuery.length > 2 ? searchResults : allProducts;\n\n  const filteredProducts = products.filter((product: Product) => {\n    // Category filter\n    if (category && product.category !== category) return false;\n    \n    // Skin type filter\n    if (filters.skinTypes.length > 0) {\n      const hasMatchingSkinType = filters.skinTypes.some(type => \n        product.skinTypes && product.skinTypes.includes(type)\n      );\n      if (!hasMatchingSkinType) return false;\n    }\n    \n    // Concerns filter\n    if (filters.concerns.length > 0) {\n      const hasMatchingConcern = filters.concerns.some(concern => \n        product.concerns && product.concerns.includes(concern)\n      );\n      if (!hasMatchingConcern) return false;\n    }\n    \n    // Features filter\n    if (filters.features.length > 0) {\n      if (filters.features.includes(\"vegan\") && !product.isVegan) return false;\n      if (filters.features.includes(\"cruelty-free\") && !product.isCrueltyFree) return false;\n      if (filters.features.includes(\"organic\") && !product.isOrganic) return false;\n    }\n    \n    // Price range filter\n    if (filters.priceRange) {\n      const price = parseFloat(product.price);\n      switch (filters.priceRange) {\n        case \"under-25\":\n          if (price >= 25) return false;\n          break;\n        case \"25-50\":\n          if (price < 25 || price >= 50) return false;\n          break;\n        case \"50-100\":\n          if (price < 50 || price >= 100) return false;\n          break;\n        case \"over-100\":\n          if (price < 100) return false;\n          break;\n      }\n    }\n    \n    return true;\n  });\n\n  const sortedProducts = [...filteredProducts].sort((a: Product, b: Product) => {\n    switch (sortBy) {\n      case \"price-low\":\n        return parseFloat(a.price) - parseFloat(b.price);\n      case \"price-high\":\n        return parseFloat(b.price) - parseFloat(a.price);\n      case \"rating\":\n        return parseFloat(b.rating || '0') - parseFloat(a.rating || '0');\n      case \"newest\":\n        return (b.createdAt ? new Date(b.createdAt).getTime() : 0) - (a.createdAt ? new Date(a.createdAt).getTime() : 0);\n      case \"featured\":\n      default:\n        return (b.featured ? 1 : 0) - (a.featured ? 1 : 0);\n    }\n  });\n\n  const handleFilterChange = (filterType: keyof typeof filters, value: string | string[]) => {\n    setFilters(prev => ({ ...prev, [filterType]: value }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      skinTypes: [],\n      concerns: [],\n      features: [],\n      priceRange: \"\",\n    });\n  };\n\n  const FilterContent = () => (\n    <div className=\"space-y-6\">\n      {/* Skin Types */}\n      <div>\n        <h3 className=\"font-semibold mb-3\">Skin Type</h3>\n        <div className=\"space-y-2\">\n          {Object.entries(SKIN_TYPES).map(([value, label]) => (\n            <Label key={value} className=\"flex items-center space-x-2\">\n              <Checkbox\n                checked={filters.skinTypes.includes(value)}\n                onCheckedChange={(checked) => {\n                  if (checked) {\n                    handleFilterChange(\"skinTypes\", [...filters.skinTypes, value]);\n                  } else {\n                    handleFilterChange(\"skinTypes\", filters.skinTypes.filter(t => t !== value));\n                  }\n                }}\n              />\n              <span>{label}</span>\n            </Label>\n          ))}\n        </div>\n      </div>\n\n      <Separator />\n\n      {/* Skin Concerns */}\n      <div>\n        <h3 className=\"font-semibold mb-3\">Skin Concerns</h3>\n        <div className=\"space-y-2\">\n          {Object.entries(SKIN_CONCERNS).map(([value, label]) => (\n            <Label key={value} className=\"flex items-center space-x-2\">\n              <Checkbox\n                checked={filters.concerns.includes(value)}\n                onCheckedChange={(checked) => {\n                  if (checked) {\n                    handleFilterChange(\"concerns\", [...filters.concerns, value]);\n                  } else {\n                    handleFilterChange(\"concerns\", filters.concerns.filter(c => c !== value));\n                  }\n                }}\n              />\n              <span>{label}</span>\n            </Label>\n          ))}\n        </div>\n      </div>\n\n      <Separator />\n\n      {/* Features */}\n      <div>\n        <h3 className=\"font-semibold mb-3\">Features</h3>\n        <div className=\"space-y-2\">\n          {[\n            { value: \"vegan\", label: \"Vegan\" },\n            { value: \"cruelty-free\", label: \"Cruelty-Free\" },\n            { value: \"organic\", label: \"Organic\" },\n          ].map((feature) => (\n            <Label key={feature.value} className=\"flex items-center space-x-2\">\n              <Checkbox\n                checked={filters.features.includes(feature.value)}\n                onCheckedChange={(checked) => {\n                  if (checked) {\n                    handleFilterChange(\"features\", [...filters.features, feature.value]);\n                  } else {\n                    handleFilterChange(\"features\", filters.features.filter(f => f !== feature.value));\n                  }\n                }}\n              />\n              <span>{feature.label}</span>\n            </Label>\n          ))}\n        </div>\n      </div>\n\n      <Separator />\n\n      {/* Price Range */}\n      <div>\n        <h3 className=\"font-semibold mb-3\">Price Range</h3>\n        <Select value={filters.priceRange} onValueChange={(value) => handleFilterChange(\"priceRange\", value)}>\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select price range\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"under-25\">Under $25</SelectItem>\n            <SelectItem value=\"25-50\">$25 - $50</SelectItem>\n            <SelectItem value=\"50-100\">$50 - $100</SelectItem>\n            <SelectItem value=\"over-100\">Over $100</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Button onClick={clearFilters} variant=\"outline\" className=\"w-full\">\n        Clear All Filters\n      </Button>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-serif font-bold text-[var(--dark-green)] mb-4\">\n            {category ? PRODUCT_CATEGORIES[category as keyof typeof PRODUCT_CATEGORIES] : \"All Products\"}\n          </h1>\n          <p className=\"text-gray-600\">\n            Discover our sustainable beauty collection featuring plant-powered formulations and eco-friendly packaging\n          </p>\n        </div>\n\n        {/* Search and Filters Bar */}\n        <div className=\"bg-white rounded-lg shadow-sm p-6 mb-8\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center\">\n            {/* Search */}\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search products...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Sort */}\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"featured\">Featured</SelectItem>\n                <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                <SelectItem value=\"newest\">Newest</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* View Mode */}\n            <div className=\"flex border rounded-lg\">\n              <Button\n                variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"grid\")}\n                className=\"rounded-r-none\"\n              >\n                <Grid className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n                className=\"rounded-l-none\"\n              >\n                <List className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            {/* Mobile Filter Button */}\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button variant=\"outline\" className=\"md:hidden\">\n                  <SlidersHorizontal className=\"h-4 w-4 mr-2\" />\n                  Filters\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\">\n                <SheetHeader>\n                  <SheetTitle>Filters</SheetTitle>\n                </SheetHeader>\n                <div className=\"mt-6\">\n                  <FilterContent />\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n\n        <div className=\"flex gap-8\">\n          {/* Desktop Filters Sidebar */}\n          <div className=\"hidden md:block w-64 flex-shrink-0\">\n            <div className=\"bg-white rounded-lg shadow-sm p-6 sticky top-24\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <Filter className=\"h-5 w-5\" />\n                <h2 className=\"text-lg font-semibold\">Filters</h2>\n              </div>\n              <FilterContent />\n            </div>\n          </div>\n\n          {/* Products Grid */}\n          <div className=\"flex-1\">\n            {isLoading ? (\n              <div className={`grid gap-6 ${\n                viewMode === \"grid\" \n                  ? \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3\" \n                  : \"grid-cols-1\"\n              }`}>\n                {[1, 2, 3, 4, 5, 6].map((i) => (\n                  <div key={i} className=\"bg-gray-200 rounded-xl h-96 animate-pulse\" />\n                ))}\n              </div>\n            ) : sortedProducts.length > 0 ? (\n              <>\n                <div className=\"mb-6 text-sm text-gray-600\">\n                  Showing {sortedProducts.length} of {products.length} products\n                </div>\n                <div className={`grid gap-6 ${\n                  viewMode === \"grid\" \n                    ? \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3\" \n                    : \"grid-cols-1\"\n                }`}>\n                  {sortedProducts.map((product: Product) => (\n                    <ProductCard \n                      key={product.id} \n                      product={product}\n                      variant={viewMode}\n                    />\n                  ))}\n                </div>\n              </>\n            ) : (\n              <div className=\"text-center py-12\">\n                <div className=\"w-24 h-24 bg-gray-100 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <Search className=\"h-12 w-12 text-gray-400\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">No products found</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Try adjusting your filters or search terms to find what you're looking for.\n                </p>\n                <Button onClick={clearFilters} variant=\"outline\">\n                  Clear Filters\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13133},"client/src/pages/quiz.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Sparkles, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport QuizModal from \"@/components/quiz/quiz-modal\";\n\nexport default function Quiz() {\n  const [isQuizOpen, setIsQuizOpen] = useState(false);\n\n  const benefits = [\n    {\n      icon: <Sparkles className=\"h-8 w-8\" />,\n      title: \"Personalized Recommendations\",\n      description: \"Get product suggestions tailored to your unique skin profile and concerns\"\n    },\n    {\n      icon: <CheckCircle className=\"h-8 w-8\" />,\n      title: \"Expert-Backed Science\",\n      description: \"Our quiz is based on dermatological research and sustainability science\"\n    },\n    {\n      icon: <CheckCircle className=\"h-8 w-8\" />,\n      title: \"Sustainable Matches\",\n      description: \"Find products that align with your environmental values and ethics\"\n    }\n  ];\n\n  const steps = [\n    {\n      step: 1,\n      title: \"Skin Analysis\",\n      description: \"Tell us about your skin type, concerns, and current routine\"\n    },\n    {\n      step: 2,\n      title: \"Lifestyle Preferences\",\n      description: \"Share your sustainability values and beauty preferences\"\n    },\n    {\n      step: 3,\n      title: \"Budget & Goals\",\n      description: \"Set your price range and skincare objectives\"\n    },\n    {\n      step: 4,\n      title: \"Get Results\",\n      description: \"Receive personalized product recommendations with exclusive discounts\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Back Button */}\n        <Link href=\"/\">\n          <Button variant=\"ghost\" className=\"mb-6\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Home\n          </Button>\n        </Link>\n\n        {/* Hero Section */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-5xl font-serif font-bold text-[var(--dark-green)] mb-6\">\n            Find Your Perfect Skincare Routine\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto mb-8\">\n            Take our AI-powered quiz to discover personalized product recommendations \n            based on your skin type, concerns, and sustainability preferences. \n            Get expert-curated suggestions in just 2 minutes.\n          </p>\n          \n          <Button\n            size=\"lg\"\n            onClick={() => setIsQuizOpen(true)}\n            className=\"bg-[var(--berry-red)] hover:bg-red-700 text-white px-12 py-4 text-xl font-semibold transform hover:scale-105 transition-all\"\n          >\n            Start Your Personalized Quiz\n          </Button>\n        </div>\n\n        {/* Benefits Section */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-serif font-bold text-center text-[var(--dark-green)] mb-8\">\n            Why Take Our Quiz?\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {benefits.map((benefit, index) => (\n              <Card key={index} className=\"text-center hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-8\">\n                  <div className=\"w-16 h-16 bg-[var(--sage-green)] rounded-full flex items-center justify-center mx-auto mb-4 text-white\">\n                    {benefit.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3\">{benefit.title}</h3>\n                  <p className=\"text-gray-600\">{benefit.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* How It Works */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-serif font-bold text-center text-[var(--dark-green)] mb-8\">\n            How It Works\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            {steps.map((step, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"w-12 h-12 bg-[var(--forest-green)] text-white rounded-full flex items-center justify-center mx-auto mb-4 text-lg font-bold\">\n                  {step.step}\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">{step.title}</h3>\n                <p className=\"text-gray-600 text-sm\">{step.description}</p>\n                {index < steps.length - 1 && (\n                  <div className=\"hidden md:block absolute top-6 left-full w-8 h-0.5 bg-[var(--sage-green)] transform -translate-y-1/2\" />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Testimonials */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-serif font-bold text-center text-[var(--dark-green)] mb-8\">\n            What Our Customers Say\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"flex\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <div key={star} className=\"w-4 h-4 bg-yellow-400 rounded-full mr-1\" />\n                    ))}\n                  </div>\n                </div>\n                <p className=\"text-gray-700 mb-4\">\n                  \"The quiz perfectly matched me with products that actually work for my sensitive skin. \n                  I love that everything is sustainable too!\"\n                </p>\n                <div className=\"flex items-center\">\n                  <div className=\"w-10 h-10 bg-[var(--sage-green)] rounded-full mr-3\" />\n                  <div>\n                    <div className=\"font-semibold\">Sarah M.</div>\n                    <div className=\"text-sm text-gray-500\">Verified Customer</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"flex\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <div key={star} className=\"w-4 h-4 bg-yellow-400 rounded-full mr-1\" />\n                    ))}\n                  </div>\n                </div>\n                <p className=\"text-gray-700 mb-4\">\n                  \"I was skeptical at first, but the recommendations were spot-on. \n                  My skin has never looked better, and I feel good about my choices.\"\n                </p>\n                <div className=\"flex items-center\">\n                  <div className=\"w-10 h-10 bg-[var(--sage-green)] rounded-full mr-3\" />\n                  <div>\n                    <div className=\"font-semibold\">Emily R.</div>\n                    <div className=\"text-sm text-gray-500\">Verified Customer</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"flex\">\n                    {[1, 2, 3, 4, 5].map((star) => (\n                      <div key={star} className=\"w-4 h-4 bg-yellow-400 rounded-full mr-1\" />\n                    ))}\n                  </div>\n                </div>\n                <p className=\"text-gray-700 mb-4\">\n                  \"The quiz saved me so much time and money. No more guessing what products \n                  might work - everything was perfectly curated for me.\"\n                </p>\n                <div className=\"flex items-center\">\n                  <div className=\"w-10 h-10 bg-[var(--sage-green)] rounded-full mr-3\" />\n                  <div>\n                    <div className=\"font-semibold\">Jessica L.</div>\n                    <div className=\"text-sm text-gray-500\">Verified Customer</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* FAQ Section */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-serif font-bold text-center text-[var(--dark-green)] mb-8\">\n            Frequently Asked Questions\n          </h2>\n          <div className=\"max-w-3xl mx-auto space-y-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-2\">How long does the quiz take?</h3>\n                <p className=\"text-gray-600\">\n                  The quiz takes approximately 2-3 minutes to complete. We keep it short while \n                  gathering all the essential information to provide accurate recommendations.\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-2\">Are the recommendations really personalized?</h3>\n                <p className=\"text-gray-600\">\n                  Yes! Our AI-powered algorithm analyzes your responses about skin type, concerns, \n                  preferences, and sustainability values to suggest products specifically for you.\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-2\">Can I retake the quiz if my skin changes?</h3>\n                <p className=\"text-gray-600\">\n                  Absolutely! We recommend retaking the quiz every 3-6 months or whenever you \n                  notice significant changes in your skin or preferences.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-2\">Do I get a discount on recommended products?</h3>\n                <p className=\"text-gray-600\">\n                  Yes! Quiz participants receive exclusive discounts on their personalized \n                  recommendations, plus early access to new product launches.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Final CTA */}\n        <div className=\"text-center bg-[var(--cream-beige)] rounded-2xl p-12\">\n          <h2 className=\"text-3xl font-serif font-bold text-[var(--dark-green)] mb-4\">\n            Ready to Transform Your Skincare Routine?\n          </h2>\n          <p className=\"text-lg text-gray-700 mb-8 max-w-2xl mx-auto\">\n            Join thousands of satisfied customers who have found their perfect products through our quiz.\n          </p>\n          <Button\n            size=\"lg\"\n            onClick={() => setIsQuizOpen(true)}\n            className=\"bg-[var(--forest-green)] hover:bg-[var(--dark-green)] text-white px-12 py-4 text-xl font-semibold transform hover:scale-105 transition-all\"\n          >\n            Take the Quiz Now\n          </Button>\n        </div>\n      </div>\n\n      {/* Quiz Modal */}\n      <QuizModal isOpen={isQuizOpen} onClose={() => setIsQuizOpen(false)} />\n    </div>\n  );\n}\n","size_bytes":11307},"client/src/pages/sustainability.tsx":{"content":"import { Link } from \"wouter\";\nimport { ArrowLeft, Leaf, Recycle, Truck, Users, TreePine, Droplets } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport ImpactStats from \"@/components/sustainability/impact-stats\";\n\nexport default function Sustainability() {\n  const initiatives = [\n    {\n      icon: <Leaf className=\"h-8 w-8\" />,\n      title: \"100% Vegan & Cruelty-Free\",\n      description: \"All our products are certified vegan and never tested on animals. We partner with Leaping Bunny for verification.\",\n      progress: 100,\n      color: \"bg-[var(--forest-green)]\"\n    },\n    {\n      icon: <Recycle className=\"h-8 w-8\" />,\n      title: \"Sustainable Packaging\",\n      description: \"95% of our packaging is made from recyclable or biodegradable materials. We're working toward 100% by 2026.\",\n      progress: 95,\n      color: \"bg-[var(--sage-green)]\"\n    },\n    {\n      icon: <Truck className=\"h-8 w-8\" />,\n      title: \"Carbon Neutral Shipping\",\n      description: \"Every order is shipped carbon-neutral through our partnerships with climate action organizations.\",\n      progress: 100,\n      color: \"bg-[var(--forest-green)]\"\n    },\n    {\n      icon: <TreePine className=\"h-8 w-8\" />,\n      title: \"Tree Planting Program\",\n      description: \"We plant one tree for every $30 spent. Over 12,000 trees planted and counting across reforestation projects.\",\n      progress: 85,\n      color: \"bg-[var(--light-green)]\"\n    }\n  ];\n\n  const certifications = [\n    {\n      name: \"Leaping Bunny\",\n      description: \"Cruelty-Free Certification\",\n      image: \"https://via.placeholder.com/120x80/228B22/FFFFFF?text=Leaping+Bunny\"\n    },\n    {\n      name: \"USDA Organic\",\n      description: \"Organic Ingredients Certification\",\n      image: \"https://via.placeholder.com/120x80/90EE90/000000?text=USDA+Organic\"\n    },\n    {\n      name: \"B Corp\",\n      description: \"Certified B Corporation\",\n      image: \"https://via.placeholder.com/120x80/A8CABA/000000?text=B+Corp\"\n    },\n    {\n      name: \"Climate Neutral\",\n      description: \"Carbon Neutral Certified\",\n      image: \"https://via.placeholder.com/120x80/006400/FFFFFF?text=Climate+Neutral\"\n    }\n  ];\n\n  const supplyChain = [\n    {\n      stage: \"Sourcing\",\n      description: \"Direct partnerships with organic farms practicing regenerative agriculture\",\n      icon: <Leaf className=\"h-6 w-6\" />,\n      details: [\n        \"Fair trade certified suppliers\",\n        \"Regenerative farming practices\",\n        \"Local sourcing when possible\",\n        \"Regular sustainability audits\"\n      ]\n    },\n    {\n      stage: \"Manufacturing\",\n      description: \"Clean production facilities powered by renewable energy\",\n      icon: <Droplets className=\"h-6 w-6\" />,\n      details: [\n        \"100% renewable energy\",\n        \"Water conservation systems\",\n        \"Waste reduction programs\",\n        \"Chemical-free processes\"\n      ]\n    },\n    {\n      stage: \"Packaging\",\n      description: \"Minimal, recyclable packaging made from post-consumer materials\",\n      icon: <Recycle className=\"h-6 w-6\" />,\n      details: [\n        \"Recyclable glass bottles\",\n        \"Biodegradable labels\",\n        \"Minimal plastic use\",\n        \"Compostable shipping materials\"\n      ]\n    },\n    {\n      stage: \"Distribution\",\n      description: \"Carbon-neutral shipping with optimized logistics\",\n      icon: <Truck className=\"h-6 w-6\" />,\n      details: [\n        \"Carbon offset programs\",\n        \"Optimized shipping routes\",\n        \"Electric vehicle fleet\",\n        \"Local distribution centers\"\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Back Button */}\n        <Link href=\"/\">\n          <Button variant=\"ghost\" className=\"mb-6\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Home\n          </Button>\n        </Link>\n\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl font-serif font-bold text-[var(--dark-green)] mb-6\">\n            Our Commitment to Sustainability\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto mb-8\">\n            We believe that beauty should never come at the cost of our planet. \n            Every product, package, and process is designed with environmental responsibility in mind.\n          </p>\n          \n          <div className=\"inline-flex items-center gap-2 bg-[var(--forest-green)] text-white px-6 py-3 rounded-full\">\n            <Leaf className=\"h-5 w-5\" />\n            <span className=\"font-semibold\">Carbon Negative Since 2023</span>\n          </div>\n        </div>\n\n        {/* Impact Stats */}\n        <ImpactStats />\n\n        {/* Sustainability Initiatives */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-serif font-bold text-center text-[var(--dark-green)] mb-8\">\n            Our Sustainability Initiatives\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {initiatives.map((initiative, index) => (\n              <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-[var(--sage-green)] rounded-full flex items-center justify-center text-white\">\n                      {initiative.icon}\n                    </div>\n                    <CardTitle className=\"text-xl\">{initiative.title}</CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-600 mb-4\">{initiative.description}</p>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Progress</span>\n                      <span className=\"font-semibold\">{initiative.progress}%</span>\n                    </div>\n                    <Progress value={initiative.progress} className=\"h-2\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </section>\n\n        {/* Detailed Information Tabs */}\n        <section className=\"mb-16\">\n          <Tabs defaultValue=\"supply-chain\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"supply-chain\">Supply Chain</TabsTrigger>\n              <TabsTrigger value=\"ingredients\">Ingredients</TabsTrigger>\n              <TabsTrigger value=\"packaging\">Packaging</TabsTrigger>\n              <TabsTrigger value=\"impact\">Impact</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"supply-chain\" className=\"mt-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-2xl\">Transparent Supply Chain</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                    {supplyChain.map((stage, index) => (\n                      <div key={index} className=\"text-center\">\n                        <div className=\"w-16 h-16 bg-[var(--forest-green)] rounded-full flex items-center justify-center mx-auto mb-4 text-white\">\n                          {stage.icon}\n                        </div>\n                        <h3 className=\"text-lg font-semibold mb-2\">{stage.stage}</h3>\n                        <p className=\"text-gray-600 text-sm mb-4\">{stage.description}</p>\n                        <ul className=\"text-xs text-gray-500 space-y-1\">\n                          {stage.details.map((detail, i) => (\n                            <li key={i}>• {detail}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"ingredients\" className=\"mt-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-2xl\">Clean, Sustainable Ingredients</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-4\">Plant-Based Actives</h3>\n                      <ul className=\"space-y-2 text-gray-600\">\n                        <li>• Bakuchiol from Psoralea corylifolia</li>\n                        <li>• Beetroot extract for natural color</li>\n                        <li>• Organic botanical oils</li>\n                        <li>• Wildcrafted herbal extracts</li>\n                      </ul>\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-4\">Sourcing Standards</h3>\n                      <ul className=\"space-y-2 text-gray-600\">\n                        <li>• USDA Organic certified</li>\n                        <li>• Fair trade partnerships</li>\n                        <li>• Regenerative agriculture</li>\n                        <li>• Biodiversity conservation</li>\n                      </ul>\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-4\">What We Avoid</h3>\n                      <ul className=\"space-y-2 text-gray-600\">\n                        <li>• Synthetic fragrances</li>\n                        <li>• Parabens and sulfates</li>\n                        <li>• Animal-derived ingredients</li>\n                        <li>• Harmful preservatives</li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"packaging\" className=\"mt-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-2xl\">Sustainable Packaging Solutions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-8\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-4\">Current Materials</h3>\n                        <div className=\"space-y-4\">\n                          <div className=\"flex justify-between items-center\">\n                            <span>Recyclable Glass</span>\n                            <span className=\"font-semibold text-[var(--forest-green)]\">70%</span>\n                          </div>\n                          <Progress value={70} className=\"h-2\" />\n                          \n                          <div className=\"flex justify-between items-center\">\n                            <span>Post-Consumer Plastic</span>\n                            <span className=\"font-semibold text-[var(--forest-green)]\">20%</span>\n                          </div>\n                          <Progress value={20} className=\"h-2\" />\n                          \n                          <div className=\"flex justify-between items-center\">\n                            <span>Biodegradable Materials</span>\n                            <span className=\"font-semibold text-[var(--forest-green)]\">10%</span>\n                          </div>\n                          <Progress value={10} className=\"h-2\" />\n                        </div>\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-4\">Innovation Goals</h3>\n                        <ul className=\"space-y-3 text-gray-600\">\n                          <li className=\"flex items-start gap-2\">\n                            <div className=\"w-2 h-2 bg-[var(--forest-green)] rounded-full mt-2\" />\n                            <span>100% recyclable packaging by 2026</span>\n                          </li>\n                          <li className=\"flex items-start gap-2\">\n                            <div className=\"w-2 h-2 bg-[var(--forest-green)] rounded-full mt-2\" />\n                            <span>Refillable product options</span>\n                          </li>\n                          <li className=\"flex items-start gap-2\">\n                            <div className=\"w-2 h-2 bg-[var(--forest-green)] rounded-full mt-2\" />\n                            <span>Compostable shipping materials</span>\n                          </li>\n                          <li className=\"flex items-start gap-2\">\n                            <div className=\"w-2 h-2 bg-[var(--forest-green)] rounded-full mt-2\" />\n                            <span>Ocean plastic collection program</span>\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"impact\" className=\"mt-8\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-2xl\">Environmental Impact</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-4\">Carbon Footprint</h3>\n                      <div className=\"space-y-4\">\n                        <div className=\"bg-[var(--cream-beige)] rounded-lg p-4\">\n                          <div className=\"text-2xl font-bold text-[var(--forest-green)] mb-1\">-25%</div>\n                          <div className=\"text-sm text-gray-600\">Carbon negative operations</div>\n                        </div>\n                        <div className=\"bg-[var(--cream-beige)] rounded-lg p-4\">\n                          <div className=\"text-2xl font-bold text-[var(--forest-green)] mb-1\">500 tons</div>\n                          <div className=\"text-sm text-gray-600\">CO2 offset annually</div>\n                        </div>\n                      </div>\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-4\">Conservation Efforts</h3>\n                      <div className=\"space-y-4\">\n                        <div className=\"bg-[var(--cream-beige)] rounded-lg p-4\">\n                          <div className=\"text-2xl font-bold text-[var(--forest-green)] mb-1\">1M gallons</div>\n                          <div className=\"text-sm text-gray-600\">Water saved through efficiency</div>\n                        </div>\n                        <div className=\"bg-[var(--cream-beige)] rounded-lg p-4\">\n                          <div className=\"text-2xl font-bold text-[var(--forest-green)] mb-1\">50 acres</div>\n                          <div className=\"text-sm text-gray-600\">Habitat protected per year</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </section>\n\n        {/* Certifications */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-serif font-bold text-center text-[var(--dark-green)] mb-8\">\n            Our Certifications\n          </h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            {certifications.map((cert, index) => (\n              <Card key={index} className=\"text-center hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <img\n                    src={cert.image}\n                    alt={cert.name}\n                    className=\"w-full h-20 object-contain mb-4\"\n                  />\n                  <h3 className=\"font-semibold mb-1\">{cert.name}</h3>\n                  <p className=\"text-sm text-gray-600\">{cert.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </section>\n\n        {/* Call to Action */}\n        <section className=\"text-center bg-[var(--forest-green)] text-white rounded-2xl p-12\">\n          <h2 className=\"text-3xl font-serif font-bold mb-4\">\n            Join Our Sustainability Journey\n          </h2>\n          <p className=\"text-lg mb-8 max-w-2xl mx-auto\">\n            Every purchase you make supports our mission to create a more sustainable beauty industry. \n            Together, we can make a difference for our planet.\n          </p>\n          <div className=\"flex flex-col md:flex-row gap-4 justify-center\">\n            <Link href=\"/products\">\n              <Button size=\"lg\" className=\"bg-white text-[var(--forest-green)] hover:bg-gray-100\">\n                Shop Sustainable Products\n              </Button>\n            </Link>\n            <Link href=\"/quiz\">\n              <Button size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-[var(--forest-green)]\">\n                Find Your Perfect Match\n              </Button>\n            </Link>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17419},"client/src/components/ar/ar-try-on.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { X, Camera, RotateCcw, Download, Share2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ARTryOnProps {\n  isOpen: boolean;\n  onClose: () => void;\n  product: Product;\n}\n\nexport default function ARTryOn({ isOpen, onClose, product }: ARTryOnProps) {\n  const [hasPermission, setHasPermission] = useState<boolean | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedShade, setSelectedShade] = useState(0);\n  const [intensity, setIntensity] = useState([70]);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n  const { toast } = useToast();\n\n  // Mock shades for the product\n  const productShades = [\n    { name: \"Natural Rose\", color: \"#E8A598\" },\n    { name: \"Berry Blush\", color: \"#D67B7B\" },\n    { name: \"Coral Sunset\", color: \"#FF7F7F\" },\n    { name: \"Deep Berry\", color: \"#A0546A\" },\n    { name: \"Classic Red\", color: \"#DC143C\" },\n  ];\n\n  useEffect(() => {\n    if (isOpen && hasPermission === null) {\n      requestCameraPermission();\n    }\n\n    return () => {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n        streamRef.current = null;\n      }\n    };\n  }, [isOpen]);\n\n  const requestCameraPermission = async () => {\n    setIsLoading(true);\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: { \n          width: { ideal: 640 },\n          height: { ideal: 480 },\n          facingMode: 'user'\n        } \n      });\n      \n      streamRef.current = stream;\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n      setHasPermission(true);\n      \n      toast({\n        title: \"Camera access granted\",\n        description: \"You can now try on the product virtually!\",\n      });\n    } catch (error) {\n      setHasPermission(false);\n      toast({\n        title: \"Camera access denied\",\n        description: \"Please allow camera access to use the AR try-on feature.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const capturePhoto = () => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    const context = canvas.getContext('2d');\n\n    if (context) {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      \n      // Draw the video frame\n      context.drawImage(video, 0, 0);\n      \n      // Simulate AR overlay (in a real implementation, this would use face detection)\n      const selectedColor = productShades[selectedShade].color;\n      context.fillStyle = selectedColor;\n      context.globalAlpha = intensity[0] / 100;\n      \n      // Mock lip area (in real AR, this would be detected via face landmarks)\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height * 0.65;\n      const lipWidth = 60;\n      const lipHeight = 20;\n      \n      context.beginPath();\n      context.ellipse(centerX, centerY, lipWidth, lipHeight, 0, 0, 2 * Math.PI);\n      context.fill();\n      \n      context.globalAlpha = 1;\n      \n      const imageData = canvas.toDataURL('image/png');\n      setCapturedImage(imageData);\n      \n      toast({\n        title: \"Photo captured!\",\n        description: \"Your AR try-on photo has been saved.\",\n      });\n    }\n  };\n\n  const downloadImage = () => {\n    if (!capturedImage) return;\n    \n    const link = document.createElement('a');\n    link.download = `ecoglow-ar-tryon-${product.name.toLowerCase().replace(/\\s+/g, '-')}.png`;\n    link.href = capturedImage;\n    link.click();\n  };\n\n  const shareImage = async () => {\n    if (!capturedImage) return;\n    \n    try {\n      // Convert data URL to blob\n      const response = await fetch(capturedImage);\n      const blob = await response.blob();\n      const file = new File([blob], 'ar-tryon.png', { type: 'image/png' });\n      \n      if (navigator.share && navigator.canShare({ files: [file] })) {\n        await navigator.share({\n          title: `AR Try-On: ${product.name}`,\n          text: `Check out how I look with ${product.name} from EcoGlow!`,\n          files: [file],\n        });\n      } else {\n        // Fallback: copy image to clipboard\n        await navigator.clipboard.write([\n          new ClipboardItem({ 'image/png': blob })\n        ]);\n        toast({\n          title: \"Image copied\",\n          description: \"AR try-on image copied to clipboard!\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Share failed\",\n        description: \"Unable to share the image. Please try downloading instead.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const resetTryOn = () => {\n    setCapturedImage(null);\n    setSelectedShade(0);\n    setIntensity([70]);\n  };\n\n  const handleClose = () => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    setCapturedImage(null);\n    setHasPermission(null);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-2xl font-serif text-[var(--dark-green)]\">\n              AR Try-On: {product.name}\n            </DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={handleClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <DialogDescription className=\"sr-only\">\n            Try on {product.name} virtually using your camera with adjustable shade and intensity controls\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Camera Permission / Loading State */}\n          {hasPermission === null || isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 border-4 border-[var(--sage-green)] border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <h3 className=\"text-lg font-semibold mb-2\">\n                {isLoading ? \"Accessing camera...\" : \"Setting up AR...\"}\n              </h3>\n              <p className=\"text-gray-600\">\n                Please allow camera access to use the virtual try-on feature\n              </p>\n            </div>\n          ) : hasPermission === false ? (\n            <div className=\"text-center py-12\">\n              <Camera className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Camera Access Required</h3>\n              <p className=\"text-gray-600 mb-6\">\n                To use the AR try-on feature, we need access to your camera. \n                Your privacy is protected - video is not recorded or stored.\n              </p>\n              <Button \n                onClick={requestCameraPermission}\n                className=\"bg-[var(--forest-green)] hover:bg-[var(--dark-green)]\"\n              >\n                <Camera className=\"h-4 w-4 mr-2\" />\n                Enable Camera\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Camera/Preview Area */}\n              <div className=\"lg:col-span-2\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"relative aspect-video bg-gray-100 rounded-lg overflow-hidden\">\n                      {capturedImage ? (\n                        <img\n                          src={capturedImage}\n                          alt=\"AR Try-on capture\"\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <>\n                          <video\n                            ref={videoRef}\n                            autoPlay\n                            muted\n                            playsInline\n                            className=\"w-full h-full object-cover scale-x-[-1]\"\n                          />\n                          <canvas ref={canvasRef} className=\"hidden\" />\n                          \n                          {/* AR Overlay Instructions */}\n                          <div className=\"absolute top-4 left-4 bg-black/50 text-white px-3 py-2 rounded-lg text-sm\">\n                            Position your face in the center\n                          </div>\n                          \n                          {/* Live AR Preview */}\n                          <div \n                            className=\"absolute inset-0 pointer-events-none\"\n                            style={{\n                              background: `radial-gradient(ellipse 60px 20px at center 65%, ${productShades[selectedShade].color}${Math.floor(intensity[0] * 2.55).toString(16).padStart(2, '0')} 0%, transparent 100%)`\n                            }}\n                          />\n                        </>\n                      )}\n                    </div>\n                    \n                    {/* Camera Controls */}\n                    <div className=\"flex justify-center gap-2 mt-4\">\n                      {capturedImage ? (\n                        <>\n                          <Button onClick={resetTryOn} variant=\"outline\">\n                            <RotateCcw className=\"h-4 w-4 mr-2\" />\n                            Try Again\n                          </Button>\n                          <Button onClick={downloadImage} variant=\"outline\">\n                            <Download className=\"h-4 w-4 mr-2\" />\n                            Download\n                          </Button>\n                          <Button onClick={shareImage} className=\"bg-[var(--forest-green)]\">\n                            <Share2 className=\"h-4 w-4 mr-2\" />\n                            Share\n                          </Button>\n                        </>\n                      ) : (\n                        <Button \n                          onClick={capturePhoto}\n                          size=\"lg\"\n                          className=\"bg-[var(--berry-red)] hover:bg-red-700\"\n                        >\n                          <Camera className=\"h-5 w-5 mr-2\" />\n                          Capture Photo\n                        </Button>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Controls Panel */}\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <h3 className=\"font-semibold mb-4\">Choose Your Shade</h3>\n                    <div className=\"grid grid-cols-1 gap-2\">\n                      {productShades.map((shade, index) => (\n                        <button\n                          key={shade.name}\n                          onClick={() => setSelectedShade(index)}\n                          className={`flex items-center gap-3 p-3 rounded-lg border transition-all ${\n                            selectedShade === index \n                              ? \"border-[var(--forest-green)] bg-[var(--sage-green)]/10\" \n                              : \"border-gray-200 hover:border-gray-300\"\n                          }`}\n                        >\n                          <div\n                            className=\"w-6 h-6 rounded-full border-2 border-white shadow-sm\"\n                            style={{ backgroundColor: shade.color }}\n                          />\n                          <span className=\"text-sm font-medium\">{shade.name}</span>\n                        </button>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"space-y-4\">\n                      <Label>Intensity: {intensity[0]}%</Label>\n                      <Slider\n                        value={intensity}\n                        onValueChange={setIntensity}\n                        max={100}\n                        min={20}\n                        step={5}\n                        className=\"w-full\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <h3 className=\"font-semibold mb-2\">Product Info</h3>\n                    <div className=\"space-y-2 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Name:</span> {product.name}\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Price:</span> ${product.price}\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Rating:</span> {product.rating}/5\n                      </div>\n                      {product.isVegan && (\n                        <div className=\"flex items-center gap-1\">\n                          <span className=\"w-2 h-2 bg-[var(--forest-green)] rounded-full\"></span>\n                          <span className=\"text-[var(--forest-green)]\">Vegan</span>\n                        </div>\n                      )}\n                      {product.isCrueltyFree && (\n                        <div className=\"flex items-center gap-1\">\n                          <span className=\"w-2 h-2 bg-[var(--forest-green)] rounded-full\"></span>\n                          <span className=\"text-[var(--forest-green)]\">Cruelty-Free</span>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <div className=\"text-center text-xs text-gray-500 bg-gray-50 p-3 rounded-lg\">\n                  <span>🔒 Your privacy is protected</span>\n                  <br />\n                  Video is processed locally and not stored\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14715},"client/src/components/cart/cart-sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { X, Minus, Plus, Trash2, Truck, Leaf } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { useCart } from \"@/hooks/use-cart\";\n\ninterface CartSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function CartSidebar({ isOpen, onClose }: CartSidebarProps) {\n  const { items, total, updateQuantity, removeFromCart, itemCount } = useCart();\n  const [shippingType, setShippingType] = useState(\"standard\");\n\n  const shippingOptions = [\n    {\n      value: \"standard\",\n      label: \"Carbon Neutral\",\n      price: 5,\n      time: \"5-7 business days\",\n      icon: <Leaf className=\"h-4 w-4\" />,\n    },\n    {\n      value: \"express\",\n      label: \"Express Green\",\n      price: 10,\n      time: \"2-3 business days\",\n      icon: <Truck className=\"h-4 w-4\" />,\n    },\n  ];\n\n  const selectedShipping = shippingOptions.find(option => option.value === shippingType);\n  const shippingCost = selectedShipping?.price || 0;\n  const carbonOffset = 0; // Free carbon offset\n  const finalTotal = total + shippingCost;\n  const treesPlanted = Math.floor(finalTotal / 30) + 1; // 1 tree per $30 spent\n  const co2Offset = treesPlanted * 0.6; // 0.6kg CO2 per tree\n\n  const handleQuantityChange = async (itemId: string, newQuantity: number) => {\n    if (newQuantity <= 0) {\n      await removeFromCart(itemId);\n    } else {\n      await updateQuantity(itemId, newQuantity);\n    }\n  };\n\n  return (\n    <Sheet open={isOpen} onOpenChange={onClose}>\n      <SheetContent side=\"right\" className=\"w-full sm:w-96 flex flex-col\">\n        <SheetHeader>\n          <div className=\"flex items-center justify-between\">\n            <SheetTitle className=\"text-2xl font-serif text-[var(--dark-green)]\">\n              Your Cart\n            </SheetTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n          {itemCount > 0 && (\n            <Badge variant=\"secondary\" className=\"w-fit\">\n              {itemCount} {itemCount === 1 ? \"item\" : \"items\"}\n            </Badge>\n          )}\n        </SheetHeader>\n\n        {items.length === 0 ? (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-gray-100 rounded-full mx-auto flex items-center justify-center\">\n                <Truck className=\"h-8 w-8 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-semibold\">Your cart is empty</h3>\n              <p className=\"text-gray-600\">Add some sustainable beauty products to get started!</p>\n              <Button onClick={onClose} className=\"bg-[var(--forest-green)]\">\n                Continue Shopping\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <>\n            {/* Cart Items */}\n            <div className=\"flex-1 overflow-y-auto space-y-4 py-4\">\n              {items.map((item) => (\n                <div key={item.id} className=\"flex gap-4 p-4 border rounded-lg\">\n                  <img\n                    src={item.product?.images[0] || \"/placeholder-product.jpg\"}\n                    alt={item.product?.name}\n                    className=\"w-16 h-16 object-cover rounded-lg\"\n                  />\n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"font-semibold text-sm truncate\">\n                      {item.product?.name}\n                    </h3>\n                    <p className=\"text-sm text-gray-600\">\n                      ${item.product?.price} each\n                    </p>\n                    <div className=\"flex items-center gap-2 mt-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleQuantityChange(item.id, item.quantity - 1)}\n                        className=\"h-8 w-8 p-0\"\n                      >\n                        <Minus className=\"h-3 w-3\" />\n                      </Button>\n                      <span className=\"min-w-[2rem] text-center\">{item.quantity}</span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleQuantityChange(item.id, item.quantity + 1)}\n                        className=\"h-8 w-8 p-0\"\n                      >\n                        <Plus className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col items-end justify-between\">\n                    <span className=\"font-semibold text-[var(--forest-green)]\">\n                      ${(parseFloat(item.product?.price || \"0\") * item.quantity).toFixed(2)}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFromCart(item.id)}\n                      className=\"text-red-500 hover:text-red-700 p-1\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Shipping Options */}\n            <div className=\"space-y-4\">\n              <Separator />\n              <div>\n                <h4 className=\"font-semibold mb-3\">Eco-Friendly Shipping</h4>\n                <RadioGroup value={shippingType} onValueChange={setShippingType}>\n                  {shippingOptions.map((option) => (\n                    <Label\n                      key={option.value}\n                      className=\"flex items-center gap-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50\"\n                    >\n                      <RadioGroupItem value={option.value} />\n                      <div className=\"flex items-center gap-2\">\n                        {option.icon}\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">\n                            {option.label} - ${option.price}\n                          </div>\n                          <div className=\"text-sm text-gray-600\">{option.time}</div>\n                        </div>\n                      </div>\n                    </Label>\n                  ))}\n                </RadioGroup>\n              </div>\n\n              {/* Order Summary */}\n              <Separator />\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal:</span>\n                  <span>${total.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Shipping:</span>\n                  <span>${shippingCost.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between text-[var(--forest-green)]\">\n                  <span>Carbon Offset:</span>\n                  <span>Free</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between font-bold text-lg\">\n                  <span>Total:</span>\n                  <span className=\"text-[var(--forest-green)]\">${finalTotal.toFixed(2)}</span>\n                </div>\n              </div>\n\n              {/* Sustainability Impact */}\n              <div className=\"bg-[var(--cream-beige)] rounded-lg p-4 text-center\">\n                <div className=\"flex items-center justify-center gap-2 text-[var(--forest-green)] mb-2\">\n                  <Leaf className=\"h-5 w-5\" />\n                  <span className=\"font-semibold\">Your Eco Impact</span>\n                </div>\n                <p className=\"text-sm text-gray-700\">\n                  🌱 Your order will plant {treesPlanted} {treesPlanted === 1 ? \"tree\" : \"trees\"} and offset {co2Offset.toFixed(1)}kg CO2\n                </p>\n              </div>\n\n              {/* Checkout Button */}\n              <Button\n                size=\"lg\"\n                className=\"w-full bg-[var(--berry-red)] hover:bg-red-700 text-white\"\n              >\n                Secure Checkout\n              </Button>\n            </div>\n          </>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":8567},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Leaf, Instagram, Youtube } from \"lucide-react\";\nimport { FaTiktok, FaPinterest } from \"react-icons/fa\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function Footer() {\n  const productLinks = [\n    { name: \"Serums & Oils\", href: \"/products/serums\" },\n    { name: \"Vegan Makeup\", href: \"/products/makeup\" },\n    { name: \"Skincare Kits\", href: \"/products/kits\" },\n    { name: \"Supplements\", href: \"/products/supplements\" },\n    { name: \"Gift Cards\", href: \"/products/gifts\" },\n  ];\n\n  const supportLinks = [\n    { name: \"Contact Us\", href: \"/contact\" },\n    { name: \"Shipping & Returns\", href: \"/shipping\" },\n    { name: \"Size Guide\", href: \"/size-guide\" },\n    { name: \"FAQ\", href: \"/faq\" },\n    { name: \"Track Order\", href: \"/track\" },\n  ];\n\n  const companyLinks = [\n    { name: \"About Us\", href: \"/about\" },\n    { name: \"Sustainability\", href: \"/sustainability\" },\n    { name: \"Blog\", href: \"/blog\" },\n    { name: \"Careers\", href: \"/careers\" },\n    { name: \"Press\", href: \"/press\" },\n  ];\n\n  return (\n    <footer className=\"bg-gray-900 text-white py-12\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand Section */}\n          <div>\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <Leaf className=\"h-8 w-8 eco-gradient\" />\n              <span className=\"text-2xl font-serif font-bold\">EcoGlow</span>\n            </div>\n            <p className=\"text-gray-400 mb-4 leading-relaxed\">\n              Sustainable skincare for the conscious beauty lover. Plant-powered \n              formulations for radiant, healthy skin.\n            </p>\n            <div className=\"flex space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2 hover:text-[var(--sage-green)]\">\n                <Instagram className=\"h-5 w-5\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2 hover:text-[var(--sage-green)]\">\n                <FaTiktok className=\"h-5 w-5\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2 hover:text-[var(--sage-green)]\">\n                <FaPinterest className=\"h-5 w-5\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2 hover:text-[var(--sage-green)]\">\n                <Youtube className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Shop Links */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Shop</h3>\n            <ul className=\"space-y-2\">\n              {productLinks.map((link) => (\n                <li key={link.name}>\n                  <Link\n                    href={link.href}\n                    className=\"text-gray-400 hover:text-white transition-colors\"\n                  >\n                    {link.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Support Links */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Support</h3>\n            <ul className=\"space-y-2\">\n              {supportLinks.map((link) => (\n                <li key={link.name}>\n                  <Link\n                    href={link.href}\n                    className=\"text-gray-400 hover:text-white transition-colors\"\n                  >\n                    {link.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Company Links */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Company</h3>\n            <ul className=\"space-y-2\">\n              {companyLinks.map((link) => (\n                <li key={link.name}>\n                  <Link\n                    href={link.href}\n                    className=\"text-gray-400 hover:text-white transition-colors\"\n                  >\n                    {link.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        {/* Newsletter Section */}\n        <Separator className=\"my-8 bg-gray-800\" />\n        \n        <div className=\"text-center mb-8\">\n          <h3 className=\"text-2xl font-serif font-bold mb-4\">\n            Join the Sustainable Beauty Movement\n          </h3>\n          <p className=\"text-gray-400 mb-6 max-w-2xl mx-auto\">\n            Get exclusive eco-tips, early access to new products, and 10% off your first purchase\n          </p>\n          \n          <form className=\"max-w-md mx-auto flex flex-col md:flex-row gap-4\">\n            <Input\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              className=\"flex-1 bg-gray-800 border-gray-700 text-white placeholder:text-gray-400\"\n            />\n            <Button\n              type=\"submit\"\n              className=\"bg-[var(--berry-red)] hover:bg-red-700 text-white px-8 py-2\"\n            >\n              Subscribe & Save\n            </Button>\n          </form>\n          \n          <p className=\"text-sm text-gray-400 mt-4\">\n            Join 25,000+ eco-conscious beauty enthusiasts. Unsubscribe anytime.\n          </p>\n        </div>\n\n        {/* Bottom Bar */}\n        <Separator className=\"mb-8 bg-gray-800\" />\n        \n        <div className=\"flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-gray-400 text-sm\">\n            © 2025 EcoGlow Skincare Hub. All rights reserved.\n          </p>\n          <div className=\"flex space-x-6 text-sm text-gray-400 mt-4 md:mt-0\">\n            <Link href=\"/privacy\" className=\"hover:text-white transition-colors\">\n              Privacy Policy\n            </Link>\n            <Link href=\"/terms\" className=\"hover:text-white transition-colors\">\n              Terms of Service\n            </Link>\n            <Link href=\"/accessibility\" className=\"hover:text-white transition-colors\">\n              Accessibility\n            </Link>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6138},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Search, Heart, ShoppingBag, User, Menu, Mic, Leaf } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useVoiceSearch } from \"@/hooks/use-voice-search\";\nimport CartSidebar from \"@/components/cart/cart-sidebar\";\nimport VoiceSearch from \"@/components/search/voice-search\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isSearchExpanded, setIsSearchExpanded] = useState(false);\n  const { itemCount } = useCart();\n  const { isListening, startListening } = useVoiceSearch();\n\n  const navigation = [\n    { name: \"Products\", href: \"/products\" },\n    { name: \"Quiz\", href: \"/quiz\" },\n    { name: \"Sustainability\", href: \"/sustainability\" },\n    { name: \"Blog\", href: \"/blog\" },\n    { name: \"Account\", href: \"/account\" },\n  ];\n\n  const isActive = (href: string) => {\n    return location === href || (href !== \"/\" && location.startsWith(href));\n  };\n\n  const handleVoiceSearch = () => {\n    startListening();\n  };\n\n  return (\n    <>\n      <header className=\"fixed top-0 w-full bg-white/95 backdrop-blur-sm shadow-md z-50 border-b\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            {/* Logo */}\n            <Link href=\"/\" className=\"flex items-center space-x-2 group\">\n              <Leaf className=\"h-8 w-8 text-[var(--forest-green)] group-hover:text-[var(--dark-green)] transition-colors\" />\n              <span className=\"text-2xl font-serif font-bold text-[var(--dark-green)]\">\n                EcoGlow\n              </span>\n            </Link>\n\n            {/* Desktop Navigation */}\n            <nav className=\"hidden md:flex space-x-8\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className={`font-medium transition-colors hover:text-[var(--forest-green)] ${\n                    isActive(item.href)\n                      ? \"text-[var(--forest-green)]\"\n                      : \"text-gray-700\"\n                  }`}\n                >\n                  {item.name}\n                </Link>\n              ))}\n            </nav>\n\n            {/* Search & Icons */}\n            <div className=\"flex items-center space-x-4\">\n              {/* Search Bar */}\n              <div className=\"relative hidden md:block\">\n                <div className={`flex items-center transition-all duration-300 ${\n                  isSearchExpanded ? \"w-80\" : \"w-64\"\n                }`}>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search sustainable beauty...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    onFocus={() => setIsSearchExpanded(true)}\n                    onBlur={() => setIsSearchExpanded(false)}\n                    className=\"pr-20 rounded-full border-[var(--sage-green)] focus:ring-[var(--forest-green)]\"\n                  />\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleVoiceSearch}\n                    className={`absolute right-10 h-8 w-8 p-0 rounded-full ${\n                      isListening ? \"text-red-500 animate-pulse\" : \"text-[var(--sage-green)]\"\n                    }`}\n                  >\n                    <Mic className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-2 h-8 w-8 p-0 rounded-full text-[var(--sage-green)]\"\n                  >\n                    <Search className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Icons */}\n              <Link href=\"/account\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                  <Heart className=\"h-5 w-5 text-[var(--sage-green)]\" />\n                </Button>\n              </Link>\n\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsCartOpen(true)}\n                className=\"relative p-2\"\n              >\n                <ShoppingBag className=\"h-5 w-5 text-[var(--sage-green)]\" />\n                {itemCount > 0 && (\n                  <Badge\n                    variant=\"destructive\"\n                    className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center text-xs bg-[var(--berry-red)]\"\n                  >\n                    {itemCount}\n                  </Badge>\n                )}\n              </Button>\n\n              <Link href=\"/account\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                  <User className=\"h-5 w-5 text-[var(--sage-green)]\" />\n                </Button>\n              </Link>\n\n              {/* Mobile Menu */}\n              <Sheet>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden p-2\">\n                    <Menu className=\"h-5 w-5 text-[var(--sage-green)]\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-64\">\n                  <div className=\"flex flex-col space-y-4 mt-8\">\n                    <div className=\"relative\">\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Search...\"\n                        className=\"pr-10\"\n                      />\n                      <Search className=\"absolute right-3 top-3 h-4 w-4 text-gray-400\" />\n                    </div>\n                    \n                    {navigation.map((item) => (\n                      <Link\n                        key={item.name}\n                        href={item.href}\n                        className={`block py-2 px-4 rounded-lg transition-colors ${\n                          isActive(item.href)\n                            ? \"bg-[var(--cream-beige)] text-[var(--forest-green)]\"\n                            : \"text-gray-700 hover:bg-gray-100\"\n                        }`}\n                      >\n                        {item.name}\n                      </Link>\n                    ))}\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Cart Sidebar */}\n      <CartSidebar isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} />\n\n      {/* Voice Search Component */}\n      <VoiceSearch searchQuery={searchQuery} onSearchChange={setSearchQuery} />\n    </>\n  );\n}\n","size_bytes":7029},"client/src/components/product/product-card.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Heart, ShoppingCart, Star, Leaf } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useWishlist } from \"@/hooks/use-wishlist\";\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductCardProps {\n  product: Product;\n  className?: string;\n  variant?: \"grid\" | \"list\";\n}\n\nexport default function ProductCard({ product, className = \"\", variant = \"grid\" }: ProductCardProps) {\n  const [isImageLoaded, setIsImageLoaded] = useState(false);\n  const { addToCart } = useCart();\n  const { isInWishlist, addToWishlist, removeFromWishlist } = useWishlist();\n  const isWishlisted = isInWishlist(product.id);\n\n  const handleAddToCart = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    try {\n      await addToCart(product.id);\n    } catch (error) {\n      console.error(\"Failed to add to cart:\", error);\n    }\n  };\n\n  const handleWishlistToggle = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    try {\n      if (isWishlisted) {\n        await removeFromWishlist(product.id);\n      } else {\n        await addToWishlist(product.id);\n      }\n    } catch (error) {\n      console.error(\"Failed to update wishlist:\", error);\n    }\n  };\n\n  const renderSustainabilityBadges = () => {\n    const badges = [];\n    if (product.isVegan) badges.push(\"Vegan\");\n    if (product.isCrueltyFree) badges.push(\"Cruelty-Free\");\n    if (product.isOrganic) badges.push(\"Organic\");\n    if (product.trending) badges.push(\"Trending\");\n    if (product.featured) badges.push(\"Featured\");\n    \n    return badges.slice(0, 2).map((badge) => (\n      <Badge\n        key={badge}\n        variant=\"secondary\"\n        className={`text-xs ${\n          badge === \"Trending\" ? \"bg-[var(--gold-light)] text-[var(--dark-green)]\" :\n          badge === \"Featured\" ? \"bg-[var(--light-green)] text-[var(--dark-green)]\" :\n          \"bg-[var(--sage-green)] text-white\"\n        }`}\n      >\n        {badge}\n      </Badge>\n    ));\n  };\n\n  const isListView = variant === \"list\";\n\n  return (\n    <Card className={`product-card group cursor-pointer overflow-hidden bg-white shadow-lg ${isListView ? 'flex' : ''} ${className}`}>\n      <Link href={`/product/${product.id}`} className={isListView ? 'flex w-full' : ''}>\n        <div className={`relative ${isListView ? 'w-48 flex-shrink-0' : ''}`}>\n          <div className={`overflow-hidden ${isListView ? 'aspect-[4/3]' : 'aspect-square'}`}>\n            <img\n              src={product.images && product.images[0] || \"/placeholder-product.jpg\"}\n              alt={product.name}\n              onLoad={() => setIsImageLoaded(true)}\n              className={`w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 ${\n                isImageLoaded ? \"opacity-100\" : \"opacity-0\"\n              }`}\n            />\n            {!isImageLoaded && (\n              <div className=\"absolute inset-0 bg-gray-200 animate-pulse\" />\n            )}\n          </div>\n          \n          {/* Overlay Badges */}\n          <div className=\"absolute top-3 left-3 flex flex-col gap-1\">\n            {renderSustainabilityBadges()}\n          </div>\n\n          {/* Wishlist Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleWishlistToggle}\n            className={`absolute top-3 right-3 h-8 w-8 p-0 rounded-full bg-white/80 backdrop-blur-sm hover:bg-white ${\n              isWishlisted ? \"text-red-500\" : \"text-gray-600\"\n            }`}\n          >\n            <Heart className={`h-4 w-4 ${isWishlisted ? \"fill-current\" : \"\"}`} />\n          </Button>\n\n          {/* Sustainability Score */}\n          {product.sustainabilityScore && product.sustainabilityScore > 80 && (\n            <div className=\"absolute bottom-3 left-3 flex items-center gap-1 bg-[var(--forest-green)]/90 text-white px-2 py-1 rounded-full text-xs\">\n              <Leaf className=\"h-3 w-3\" />\n              <span>{product.sustainabilityScore}% Eco</span>\n            </div>\n          )}\n        </div>\n\n        <CardContent className={`${isListView ? 'flex-1 p-6 flex flex-col justify-between' : 'p-6'}`}>\n          <div className={isListView ? 'space-y-3' : ''}>\n            <div className=\"flex items-center gap-1 mb-2\">\n              <div className=\"flex\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <Star\n                    key={star}\n                    className={`h-4 w-4 ${\n                      star <= Math.floor(parseFloat(product.rating || '0'))\n                        ? \"text-yellow-400 fill-current\"\n                        : \"text-gray-300\"\n                    }`}\n                  />\n                ))}\n              </div>\n              <span className=\"text-sm text-gray-600\">({product.reviewCount})</span>\n            </div>\n\n            <h3 className={`font-semibold mb-2 group-hover:text-[var(--forest-green)] transition-colors ${\n              isListView ? 'text-xl' : 'text-lg'\n            }`}>\n              {product.name}\n            </h3>\n            \n            <p className={`text-gray-600 text-sm mb-4 ${isListView ? 'line-clamp-3' : 'line-clamp-2'}`}>\n              {product.description}\n            </p>\n\n            <div className={`flex items-center ${isListView ? 'justify-between' : 'justify-between'}`}>\n              <div className=\"flex flex-col\">\n                <span className={`font-bold text-[var(--forest-green)] ${isListView ? 'text-3xl' : 'text-2xl'}`}>\n                  ${product.price}\n                </span>\n                {product.stock && product.stock < 10 && product.stock > 0 && (\n                  <span className=\"text-xs text-orange-500\">\n                    Only {product.stock} left\n                  </span>\n                )}\n              </div>\n\n              <Button\n                onClick={handleAddToCart}\n                className={`bg-[var(--forest-green)] hover:bg-[var(--dark-green)] text-white ${\n                  isListView ? 'px-6 py-2' : ''\n                }`}\n              >\n                <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                Add to Cart\n              </Button>\n            </div>\n\n            {/* Key Benefits */}\n            {product.benefits && product.benefits.length > 0 && (\n              <div className={`pt-4 border-t ${isListView ? 'mt-4' : 'mt-4'}`}>\n                <div className=\"flex flex-wrap gap-1\">\n                  {product.benefits.slice(0, isListView ? 4 : 3).map((benefit) => (\n                    <Badge\n                      key={benefit}\n                      variant=\"outline\"\n                      className=\"text-xs text-[var(--forest-green)] border-[var(--sage-green)]\"\n                    >\n                      {benefit}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Link>\n    </Card>\n  );\n}\n","size_bytes":7107},"client/src/components/product/product-gallery.tsx":{"content":"import { useState } from \"react\";\nimport { ChevronLeft, ChevronRight, ZoomIn } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogTrigger } from \"@/components/ui/dialog\";\n\ninterface ProductGalleryProps {\n  images: string[];\n  productName: string;\n}\n\nexport default function ProductGallery({ images, productName }: ProductGalleryProps) {\n  const [selectedImageIndex, setSelectedImageIndex] = useState(0);\n  const [isZoomed, setIsZoomed] = useState(false);\n\n  const handlePrevious = () => {\n    setSelectedImageIndex((prev) => (prev === 0 ? images.length - 1 : prev - 1));\n  };\n\n  const handleNext = () => {\n    setSelectedImageIndex((prev) => (prev === images.length - 1 ? 0 : prev + 1));\n  };\n\n  if (!images || images.length === 0) {\n    return (\n      <div className=\"aspect-square bg-gray-200 rounded-xl flex items-center justify-center\">\n        <span className=\"text-gray-400\">No image available</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Main Image */}\n      <div className=\"relative group\">\n        <div className=\"aspect-square overflow-hidden rounded-xl bg-gray-100\">\n          <img\n            src={images[selectedImageIndex]}\n            alt={`${productName} - View ${selectedImageIndex + 1}`}\n            className=\"w-full h-full object-cover\"\n          />\n        </div>\n\n        {/* Navigation Arrows */}\n        {images.length > 1 && (\n          <>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handlePrevious}\n              className=\"absolute left-2 top-1/2 -translate-y-1/2 bg-white/80 backdrop-blur-sm hover:bg-white opacity-0 group-hover:opacity-100 transition-opacity\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleNext}\n              className=\"absolute right-2 top-1/2 -translate-y-1/2 bg-white/80 backdrop-blur-sm hover:bg-white opacity-0 group-hover:opacity-100 transition-opacity\"\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </>\n        )}\n\n        {/* Zoom Button */}\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute top-2 right-2 bg-white/80 backdrop-blur-sm hover:bg-white opacity-0 group-hover:opacity-100 transition-opacity\"\n            >\n              <ZoomIn className=\"h-4 w-4\" />\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl\">\n            <img\n              src={images[selectedImageIndex]}\n              alt={`${productName} - Zoomed view`}\n              className=\"w-full h-auto max-h-[80vh] object-contain\"\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Thumbnail Grid */}\n      {images.length > 1 && (\n        <div className=\"grid grid-cols-4 gap-2\">\n          {images.map((image, index) => (\n            <button\n              key={index}\n              onClick={() => setSelectedImageIndex(index)}\n              className={`aspect-square overflow-hidden rounded-lg border-2 transition-all ${\n                index === selectedImageIndex\n                  ? \"border-[var(--forest-green)] opacity-100\"\n                  : \"border-gray-200 opacity-60 hover:opacity-80\"\n              }`}\n            >\n              <img\n                src={image}\n                alt={`${productName} - Thumbnail ${index + 1}`}\n                className=\"w-full h-full object-cover\"\n              />\n            </button>\n          ))}\n        </div>\n      )}\n\n      {/* Image Indicators */}\n      {images.length > 1 && (\n        <div className=\"flex justify-center space-x-2\">\n          {images.map((_, index) => (\n            <button\n              key={index}\n              onClick={() => setSelectedImageIndex(index)}\n              className={`w-2 h-2 rounded-full transition-all ${\n                index === selectedImageIndex\n                  ? \"bg-[var(--forest-green)]\"\n                  : \"bg-gray-300 hover:bg-gray-400\"\n              }`}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4281},"client/src/components/quiz/quiz-modal.tsx":{"content":"import { useState } from \"react\";\nimport { X, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { QuizData } from \"@/lib/types\";\n\ninterface QuizModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface QuizStep {\n  id: string;\n  title: string;\n  type: \"radio\" | \"checkbox\";\n  options: Array<{ value: string; label: string; description?: string }>;\n}\n\nconst quizSteps: QuizStep[] = [\n  {\n    id: \"skinType\",\n    title: \"What's your skin type?\",\n    type: \"radio\",\n    options: [\n      { value: \"dry\", label: \"Dry\", description: \"Often feels tight or flaky\" },\n      { value: \"oily\", label: \"Oily\", description: \"Shiny with enlarged pores\" },\n      { value: \"combination\", label: \"Combination\", description: \"Oily T-zone, dry cheeks\" },\n      { value: \"sensitive\", label: \"Sensitive\", description: \"Easily irritated or reactive\" },\n      { value: \"normal\", label: \"Normal\", description: \"Balanced and comfortable\" },\n    ],\n  },\n  {\n    id: \"concerns\",\n    title: \"What are your main skin concerns?\",\n    type: \"checkbox\",\n    options: [\n      { value: \"aging\", label: \"Fine lines & aging\" },\n      { value: \"acne\", label: \"Acne & breakouts\" },\n      { value: \"pigmentation\", label: \"Dark spots & pigmentation\" },\n      { value: \"hydration\", label: \"Dryness & hydration\" },\n      { value: \"dullness\", label: \"Dullness & lack of glow\" },\n      { value: \"sensitivity\", label: \"Sensitivity & irritation\" },\n    ],\n  },\n  {\n    id: \"sustainability\",\n    title: \"How important is sustainability to you?\",\n    type: \"radio\",\n    options: [\n      { value: \"very\", label: \"Very important\", description: \"I only buy eco-friendly products\" },\n      { value: \"somewhat\", label: \"Somewhat important\", description: \"I prefer sustainable when possible\" },\n      { value: \"not\", label: \"Not a priority\", description: \"I focus on effectiveness over sustainability\" },\n    ],\n  },\n  {\n    id: \"budget\",\n    title: \"What's your budget for skincare?\",\n    type: \"radio\",\n    options: [\n      { value: \"low\", label: \"Under $50/month\" },\n      { value: \"medium\", label: \"$50-100/month\" },\n      { value: \"high\", label: \"$100+/month\" },\n    ],\n  },\n  {\n    id: \"routine\",\n    title: \"How complex do you like your routine?\",\n    type: \"radio\",\n    options: [\n      { value: \"simple\", label: \"Simple\", description: \"2-3 products maximum\" },\n      { value: \"moderate\", label: \"Moderate\", description: \"4-6 products is perfect\" },\n      { value: \"complex\", label: \"Complex\", description: \"I love a 10+ step routine\" },\n    ],\n  },\n];\n\nexport default function QuizModal({ isOpen, onClose }: QuizModalProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [answers, setAnswers] = useState<Partial<QuizData>>({});\n  const [recommendations, setRecommendations] = useState<any[]>([]);\n  const { toast } = useToast();\n\n  const saveQuizMutation = useMutation({\n    mutationFn: async (quizData: QuizData) => {\n      const response = await apiRequest(\"POST\", \"/api/quiz\", {\n        userId: \"demo-user\",\n        responses: quizData,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setRecommendations(data.recommendations || []);\n      setCurrentStep(quizSteps.length); // Go to results step\n      toast({\n        title: \"Quiz completed!\",\n        description: \"Your personalized recommendations are ready.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save quiz results. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const currentQuizStep = quizSteps[currentStep];\n  const progress = ((currentStep + 1) / (quizSteps.length + 1)) * 100;\n  const isLastStep = currentStep === quizSteps.length - 1;\n  const isResultsStep = currentStep === quizSteps.length;\n\n  const handleAnswer = (stepId: string, value: string | string[]) => {\n    setAnswers(prev => ({ ...prev, [stepId]: value }));\n  };\n\n  const handleNext = () => {\n    if (isLastStep) {\n      // Submit quiz\n      const quizData: QuizData = {\n        skinType: answers.skinType || \"\",\n        concerns: Array.isArray(answers.concerns) ? answers.concerns : [],\n        sustainability: answers.sustainability || \"\",\n        budget: answers.budget || \"\",\n        routineComplexity: answers.routineComplexity || \"\",\n      };\n      saveQuizMutation.mutate(quizData);\n    } else {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(prev => prev - 1);\n    }\n  };\n\n  const handleClose = () => {\n    setCurrentStep(0);\n    setAnswers({});\n    setRecommendations([]);\n    onClose();\n  };\n\n  const canProceed = () => {\n    if (isResultsStep) return false;\n    const currentAnswer = answers[currentQuizStep.id as keyof QuizData];\n    return currentAnswer && (Array.isArray(currentAnswer) ? currentAnswer.length > 0 : true);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-3xl font-serif text-[var(--dark-green)]\">\n              {isResultsStep ? \"Your Perfect Routine\" : \"Discover Your Perfect Routine\"}\n            </DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={handleClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <DialogDescription className=\"sr-only\">\n            {isResultsStep \n              ? \"View your personalized skincare product recommendations based on your quiz answers\"\n              : \"Complete a personalized quiz to discover the perfect skincare routine for your needs\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Progress Bar */}\n        <div className=\"space-y-2\">\n          <Progress value={progress} className=\"h-2\" />\n          <p className=\"text-sm text-gray-600\">\n            Step {Math.min(currentStep + 1, quizSteps.length + 1)} of {quizSteps.length + 1}\n          </p>\n        </div>\n\n        {/* Quiz Steps */}\n        {!isResultsStep && currentQuizStep && (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-2xl font-semibold\">{currentQuizStep.title}</h3>\n\n            {currentQuizStep.type === \"radio\" ? (\n              <RadioGroup\n                value={answers[currentQuizStep.id as keyof QuizData] as string}\n                onValueChange={(value) => handleAnswer(currentQuizStep.id, value)}\n                className=\"space-y-3\"\n              >\n                {currentQuizStep.options.map((option) => (\n                  <Label\n                    key={option.value}\n                    className=\"flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer hover:border-[var(--sage-green)] transition-colors\"\n                  >\n                    <RadioGroupItem value={option.value} className=\"mr-3\" />\n                    <div>\n                      <div className=\"font-semibold\">{option.label}</div>\n                      {option.description && (\n                        <div className=\"text-gray-600 text-sm\">{option.description}</div>\n                      )}\n                    </div>\n                  </Label>\n                ))}\n              </RadioGroup>\n            ) : (\n              <div className=\"space-y-3\">\n                {currentQuizStep.options.map((option) => (\n                  <Label\n                    key={option.value}\n                    className=\"flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer hover:border-[var(--sage-green)] transition-colors\"\n                  >\n                    <Checkbox\n                      checked={(answers.concerns as string[])?.includes(option.value) || false}\n                      onCheckedChange={(checked) => {\n                        const currentConcerns = (answers.concerns as string[]) || [];\n                        if (checked) {\n                          handleAnswer(\"concerns\", [...currentConcerns, option.value]);\n                        } else {\n                          handleAnswer(\"concerns\", currentConcerns.filter(c => c !== option.value));\n                        }\n                      }}\n                      className=\"mr-3\"\n                    />\n                    <div className=\"font-semibold\">{option.label}</div>\n                  </Label>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Results Step */}\n        {isResultsStep && (\n          <div className=\"space-y-6\">\n            <div className=\"bg-[var(--cream-beige)] rounded-xl p-6\">\n              <h4 className=\"text-xl font-semibold mb-4\">Perfect for your skin profile:</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {/* Placeholder for recommended products */}\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <img\n                      src=\"https://images.unsplash.com/photo-1570194065650-d99fb4bedf0a?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\"\n                      alt=\"Recommended product\"\n                      className=\"w-full h-32 object-cover rounded-lg mb-3\"\n                    />\n                    <h5 className=\"font-semibold\">Bakuchiol Glow Serum</h5>\n                    <p className=\"text-sm text-gray-600 mb-2\">Perfect for anti-aging concerns</p>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"font-bold text-[var(--forest-green)]\">$28</span>\n                      <Button size=\"sm\" className=\"bg-[var(--forest-green)]\">\n                        Add to Cart\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <img\n                      src=\"https://images.unsplash.com/photo-1556228720-195a672e8a03?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=150\"\n                      alt=\"Recommended kit\"\n                      className=\"w-full h-32 object-cover rounded-lg mb-3\"\n                    />\n                    <h5 className=\"font-semibold\">Complete Glow Kit</h5>\n                    <p className=\"text-sm text-gray-600 mb-2\">Full routine bundle - save 15%</p>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"font-bold text-[var(--forest-green)]\">$65</span>\n                      <Button size=\"sm\" className=\"bg-[var(--forest-green)]\">\n                        Add to Cart\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <Button\n                size=\"lg\"\n                className=\"bg-[var(--berry-red)] hover:bg-red-700 text-white px-8\"\n                onClick={handleClose}\n              >\n                Continue Shopping\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Navigation Buttons */}\n        {!isResultsStep && (\n          <div className=\"flex justify-between pt-6\">\n            <Button\n              variant=\"outline\"\n              onClick={handlePrevious}\n              disabled={currentStep === 0}\n              className=\"flex items-center gap-2\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n              Previous\n            </Button>\n\n            <Button\n              onClick={handleNext}\n              disabled={!canProceed() || saveQuizMutation.isPending}\n              className=\"bg-[var(--forest-green)] hover:bg-[var(--dark-green)] flex items-center gap-2\"\n            >\n              {isLastStep ? (\n                saveQuizMutation.isPending ? \"Analyzing...\" : \"Get My Results\"\n              ) : (\n                <>\n                  Next\n                  <ChevronRight className=\"h-4 w-4\" />\n                </>\n              )}\n            </Button>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12742},"client/src/components/search/voice-search.tsx":{"content":"import { useEffect } from \"react\";\nimport { Mic, MicOff } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useVoiceSearch } from \"@/hooks/use-voice-search\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface VoiceSearchProps {\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n}\n\nexport default function VoiceSearch({ searchQuery, onSearchChange }: VoiceSearchProps) {\n  const { \n    isListening, \n    transcript, \n    startListening, \n    stopListening, \n    resetTranscript, \n    isSupported \n  } = useVoiceSearch();\n  const { toast } = useToast();\n\n  // Update search query when transcript changes\n  useEffect(() => {\n    if (transcript && !isListening) {\n      onSearchChange(transcript);\n      // Auto-reset transcript after a delay\n      setTimeout(() => {\n        resetTranscript();\n      }, 3000);\n    }\n  }, [transcript, isListening, onSearchChange, resetTranscript]);\n\n  const handleVoiceSearch = () => {\n    if (isListening) {\n      stopListening();\n    } else {\n      startListening();\n    }\n  };\n\n  // Show voice search results suggestions\n  const getVoiceSearchSuggestions = (query: string) => {\n    if (!query) return [];\n    \n    const suggestions = [\n      \"vegan serums under $30\",\n      \"bakuchiol anti-aging products\",\n      \"sustainable skincare kits\",\n      \"cruelty-free makeup\",\n      \"organic moisturizers\",\n      \"beet-based supplements\",\n      \"eco-friendly cleansers\",\n      \"sensitive skin products\"\n    ];\n    \n    return suggestions.filter(suggestion => \n      suggestion.toLowerCase().includes(query.toLowerCase())\n    ).slice(0, 3);\n  };\n\n  if (!isSupported) {\n    return null; // Don't render if voice search isn't supported\n  }\n\n  return (\n    <>\n      {/* Voice Search Status Indicator */}\n      {isListening && (\n        <div className=\"fixed top-24 right-4 z-50\">\n          <Card className=\"border-[var(--forest-green)] shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"relative\">\n                  <Mic className=\"h-5 w-5 text-[var(--forest-green)]\" />\n                  <div className=\"absolute -inset-1 bg-[var(--forest-green)] rounded-full opacity-20 animate-ping\" />\n                </div>\n                <div>\n                  <div className=\"font-semibold text-[var(--forest-green)]\">Listening...</div>\n                  <div className=\"text-sm text-gray-600\">Speak now to search</div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={stopListening}\n                  className=\"ml-2\"\n                >\n                  <MicOff className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Live Transcript Display */}\n      {transcript && (\n        <div className=\"fixed top-36 right-4 z-50 max-w-sm\">\n          <Card className=\"border-[var(--sage-green)] shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-semibold text-[var(--forest-green)]\">\n                    Voice Input\n                  </span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={resetTranscript}\n                    className=\"h-6 w-6 p-0\"\n                  >\n                    ×\n                  </Button>\n                </div>\n                <div className=\"text-sm bg-[var(--cream-beige)] p-2 rounded\">\n                  \"{transcript}\"\n                </div>\n                {!isListening && (\n                  <div className=\"text-xs text-gray-500\">\n                    Searching for products...\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Voice Search Suggestions */}\n      {transcript && !isListening && (\n        <div className=\"fixed top-52 right-4 z-50 max-w-sm\">\n          <Card className=\"shadow-lg\">\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-2\">\n                <div className=\"text-sm font-semibold text-gray-700\">\n                  Voice Search Suggestions\n                </div>\n                {getVoiceSearchSuggestions(transcript).map((suggestion, index) => (\n                  <button\n                    key={index}\n                    onClick={() => onSearchChange(suggestion)}\n                    className=\"block w-full text-left text-sm p-2 rounded hover:bg-[var(--cream-beige)] transition-colors\"\n                  >\n                    <Mic className=\"h-3 w-3 inline mr-2 text-[var(--sage-green)]\" />\n                    {suggestion}\n                  </button>\n                ))}\n                \n                <div className=\"pt-2 border-t\">\n                  <button\n                    onClick={handleVoiceSearch}\n                    className=\"flex items-center gap-2 text-sm text-[var(--forest-green)] hover:text-[var(--dark-green)]\"\n                  >\n                    <Mic className=\"h-3 w-3\" />\n                    Search again\n                  </button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Voice Search Tutorial (first time users) */}\n      {!transcript && !isListening && (\n        <div className=\"fixed bottom-4 right-4 z-50 max-w-xs\">\n          <Card className=\"bg-[var(--forest-green)] text-white border-0 shadow-lg opacity-0 animate-in fade-in duration-1000\">\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Mic className=\"h-4 w-4\" />\n                  <span className=\"text-sm font-semibold\">Voice Search Tips</span>\n                </div>\n                <div className=\"text-xs space-y-1\">\n                  <div>• \"Show me vegan serums\"</div>\n                  <div>• \"Find products under $25\"</div>\n                  <div>• \"Bakuchiol anti-aging\"</div>\n                  <div>• \"Sustainable skincare kits\"</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":6480},"client/src/components/sustainability/impact-stats.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { TreePine, Leaf, Recycle, Users } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface StatItem {\n  icon: React.ReactNode;\n  value: number;\n  label: string;\n  suffix: string;\n  color: string;\n  bgColor: string;\n}\n\nexport default function ImpactStats() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [animatedValues, setAnimatedValues] = useState({ trees: 0, co2: 0, packaging: 0, customers: 0 });\n  const sectionRef = useRef<HTMLElement>(null);\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats/sustainability\"],\n  });\n\n  const statsData: StatItem[] = [\n    {\n      icon: <TreePine className=\"h-8 w-8\" />,\n      value: stats?.treesPlanted || 12000,\n      label: \"Trees Planted\",\n      suffix: \"\",\n      color: \"text-[var(--forest-green)]\",\n      bgColor: \"bg-[var(--forest-green)]/10\"\n    },\n    {\n      icon: <Leaf className=\"h-8 w-8\" />,\n      value: stats?.co2Offset || 500,\n      label: \"Tons CO2 Offset\",\n      suffix: \"\",\n      color: \"text-[var(--sage-green)]\",\n      bgColor: \"bg-[var(--sage-green)]/10\"\n    },\n    {\n      icon: <Recycle className=\"h-8 w-8\" />,\n      value: stats?.sustainablePackaging || 95,\n      label: \"% Sustainable Packaging\",\n      suffix: \"%\",\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\"\n    },\n    {\n      icon: <Users className=\"h-8 w-8\" />,\n      value: stats?.happyCustomers || 25000,\n      label: \"Happy Customers\",\n      suffix: \"\",\n      color: \"text-[var(--dark-green)]\",\n      bgColor: \"bg-[var(--dark-green)]/10\"\n    }\n  ];\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && !isVisible) {\n          setIsVisible(true);\n          animateCounters();\n        }\n      },\n      { threshold: 0.3 }\n    );\n\n    if (sectionRef.current) {\n      observer.observe(sectionRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [isVisible]);\n\n  const animateCounters = () => {\n    const duration = 2000; // 2 seconds\n    const frameDuration = 1000 / 60; // 60 FPS\n    const totalFrames = Math.round(duration / frameDuration);\n    \n    let frame = 0;\n    \n    const counter = setInterval(() => {\n      frame++;\n      const progress = frame / totalFrames;\n      const easeOutQuart = 1 - Math.pow(1 - progress, 4);\n      \n      setAnimatedValues({\n        trees: Math.round(easeOutQuart * statsData[0].value),\n        co2: Math.round(easeOutQuart * statsData[1].value),\n        packaging: Math.round(easeOutQuart * statsData[2].value),\n        customers: Math.round(easeOutQuart * statsData[3].value),\n      });\n      \n      if (frame === totalFrames) {\n        clearInterval(counter);\n      }\n    }, frameDuration);\n  };\n\n  const formatNumber = (num: number, index: number) => {\n    if (!isVisible) return \"0\";\n    const animatedNum = Object.values(animatedValues)[index];\n    \n    if (animatedNum >= 1000) {\n      return (animatedNum / 1000).toFixed(1) + \"K\";\n    }\n    return animatedNum.toString();\n  };\n\n  return (\n    <section \n      ref={sectionRef}\n      className=\"py-16 bg-[var(--forest-green)] text-white relative overflow-hidden\"\n    >\n      {/* Background Pattern */}\n      <div \n        className=\"absolute inset-0 opacity-20\"\n        style={{\n          backgroundImage: `url('https://images.unsplash.com/photo-1574943320219-553eb213f72d?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=800')`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center'\n        }}\n      />\n      \n      <div className=\"container mx-auto px-4 relative z-10\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-serif font-bold mb-4\">Our Environmental Impact</h2>\n          <p className=\"text-xl opacity-90 max-w-2xl mx-auto\">\n            Making beauty sustainable, one product at a time. See the real difference we're making together.\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {statsData.map((stat, index) => (\n            <Card \n              key={stat.label}\n              className=\"bg-white/10 backdrop-blur-sm border-white/20 hover:bg-white/20 transition-all duration-300 transform hover:scale-105\"\n            >\n              <CardContent className=\"p-6 text-center\">\n                <div className={`w-16 h-16 ${stat.bgColor} rounded-full flex items-center justify-center mx-auto mb-4 bg-white/20`}>\n                  <div className=\"text-white\">\n                    {stat.icon}\n                  </div>\n                </div>\n                \n                <div className=\"text-4xl font-bold mb-2 text-white\">\n                  {formatNumber(stat.value, index)}{stat.suffix}\n                </div>\n                \n                <div className=\"text-lg opacity-90 font-medium\">\n                  {stat.label}\n                </div>\n                \n                {/* Progress indicator for animated stats */}\n                {isVisible && (\n                  <div className=\"mt-3 w-full bg-white/20 rounded-full h-1\">\n                    <div \n                      className=\"bg-white rounded-full h-1 transition-all duration-2000 ease-out\"\n                      style={{ \n                        width: `${(Object.values(animatedValues)[index] / stat.value) * 100}%` \n                      }}\n                    />\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        \n        {/* Additional Impact Details */}\n        <div className=\"mt-12 text-center\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <div className=\"space-y-2\">\n              <div className=\"text-2xl font-bold\">🌍</div>\n              <div className=\"font-semibold\">Carbon Negative</div>\n              <div className=\"text-sm opacity-80\">\n                We offset more CO2 than we produce\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"text-2xl font-bold\">♻️</div>\n              <div className=\"font-semibold\">Circular Economy</div>\n              <div className=\"text-sm opacity-80\">\n                Refillable products and recycling programs\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"text-2xl font-bold\">🤝</div>\n              <div className=\"font-semibold\">Fair Trade</div>\n              <div className=\"text-sm opacity-80\">\n                Supporting ethical supply chains worldwide\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"text-center mt-12\">\n          <div className=\"inline-flex items-center gap-2 bg-white/10 backdrop-blur-sm px-6 py-3 rounded-full\">\n            <Leaf className=\"h-5 w-5\" />\n            <span className=\"font-semibold\">Join our mission for a cleaner planet</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Floating Elements */}\n      <div className=\"absolute top-20 left-10 opacity-30 animate-bounce\">\n        <Leaf className=\"h-8 w-8 text-white\" />\n      </div>\n      <div className=\"absolute top-40 right-20 opacity-30 animate-bounce\" style={{ animationDelay: '1s' }}>\n        <TreePine className=\"h-6 w-6 text-white\" />\n      </div>\n      <div className=\"absolute bottom-20 left-20 opacity-30 animate-bounce\" style={{ animationDelay: '2s' }}>\n        <Recycle className=\"h-7 w-7 text-white\" />\n      </div>\n    </section>\n  );\n}\n","size_bytes":7647},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\" aria-describedby={undefined}>\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4914},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/checkout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { ChevronRight, Lock, Leaf, CreditCard, MapPin, Package, Check, ShoppingCart, Truck, Zap, Plus, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Product, CartItem } from \"@shared/schema\";\n\ninterface CheckoutFormData {\n  shipping: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    phone: string;\n    address: string;\n    apartment: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n    shippingMethod: string;\n  };\n  payment: {\n    cardNumber: string;\n    expiryDate: string;\n    cvv: string;\n    cardName: string;\n    billingAddressSame: boolean;\n    billingAddress?: {\n      address: string;\n      city: string;\n      state: string;\n      zipCode: string;\n      country: string;\n    };\n  };\n  ecoOptions: {\n    carbonOffset: boolean;\n    extraTrees: boolean;\n  };\n}\n\nconst SHIPPING_METHODS = [\n  {\n    id: \"standard\",\n    name: \"Standard\",\n    price: 5,\n    description: \"Carbon-Neutral, 3-5 Days\",\n    icon: Truck,\n    ecoBonus: \"Plants 1 Tree\"\n  },\n  {\n    id: \"express\",\n    name: \"Express\",\n    price: 10,\n    description: \"Offset Emissions, 1-2 Days\", \n    icon: Zap,\n    ecoBonus: \"Plants 2 Trees\"\n  }\n];\n\nexport default function Checkout() {\n  const [, setLocation] = useLocation();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [formData, setFormData] = useState<CheckoutFormData>({\n    shipping: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      apartment: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      country: \"US\",\n      shippingMethod: \"standard\"\n    },\n    payment: {\n      cardNumber: \"\",\n      expiryDate: \"\",\n      cvv: \"\",\n      cardName: \"\",\n      billingAddressSame: true\n    },\n    ecoOptions: {\n      carbonOffset: true,\n      extraTrees: false\n    }\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const { clearCart } = useCart();\n  const { toast } = useToast();\n\n  const { data: cartItems = [] } = useQuery<CartItem[]>({\n    queryKey: [\"/api/cart/demo-user\"],\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n  });\n\n  // Redirect if cart is empty\n  useEffect(() => {\n    if (cartItems.length === 0) {\n      setLocation(\"/cart\");\n    }\n  }, [cartItems, setLocation]);\n\n  const getCartItemsWithProducts = () => {\n    return cartItems.map(cartItem => {\n      const product = products.find(p => p.id === cartItem.productId);\n      return { ...cartItem, product };\n    }).filter(item => item.product);\n  };\n\n  const cartItemsWithProducts = getCartItemsWithProducts();\n\n  const calculateSubtotal = () => {\n    return cartItemsWithProducts.reduce((total, item) => {\n      return total + (parseFloat(item.product!.price) * (item.quantity || 1));\n    }, 0);\n  };\n\n  const calculateTax = (subtotal: number) => {\n    return subtotal * 0.08; // 8% tax rate\n  };\n\n  const calculateShipping = () => {\n    const method = SHIPPING_METHODS.find(m => m.id === formData.shipping.shippingMethod);\n    return method ? method.price : 0;\n  };\n\n  const calculateEcoFees = () => {\n    let fees = 0;\n    if (formData.ecoOptions.carbonOffset) fees += 2;\n    if (formData.ecoOptions.extraTrees) fees += 3;\n    return fees;\n  };\n\n  const calculateCarbonOffset = () => {\n    return cartItemsWithProducts.length * 0.4; // 0.4kg CO2 per item\n  };\n\n  const calculateTotal = () => {\n    const subtotal = calculateSubtotal();\n    const tax = calculateTax(subtotal);\n    const shipping = calculateShipping();\n    const ecoFees = calculateEcoFees();\n    return subtotal + tax + shipping + ecoFees;\n  };\n\n  const handleInputChange = (section: keyof CheckoutFormData, field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [section]: {\n        ...prev[section],\n        [field]: value\n      }\n    }));\n  };\n\n  const validateStep = (step: number): boolean => {\n    switch (step) {\n      case 1:\n        const shipping = formData.shipping;\n        return !!(shipping.firstName && shipping.lastName && shipping.email && \n                 shipping.address && shipping.city && shipping.state && shipping.zipCode);\n      case 2:\n        const payment = formData.payment;\n        return !!(payment.cardNumber && payment.expiryDate && payment.cvv && payment.cardName);\n      default:\n        return true;\n    }\n  };\n\n  const nextStep = () => {\n    if (validateStep(currentStep)) {\n      setCurrentStep(prev => Math.min(prev + 1, 3));\n    } else {\n      toast({\n        title: \"Please complete all required fields\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const prevStep = () => {\n    setCurrentStep(prev => Math.max(prev - 1, 1));\n  };\n\n  const placeOrderMutation = useMutation({\n    mutationFn: async () => {\n      const orderData = {\n        items: cartItemsWithProducts.map(item => ({\n          productId: item.productId,\n          quantity: item.quantity || 1,\n          price: item.product!.price\n        })),\n        shipping: formData.shipping,\n        payment: { last4: formData.payment.cardNumber.slice(-4) },\n        totals: {\n          subtotal: calculateSubtotal(),\n          tax: calculateTax(calculateSubtotal()),\n          shipping: calculateShipping(),\n          ecoFees: calculateEcoFees(),\n          total: calculateTotal()\n        },\n        ecoOptions: formData.ecoOptions,\n        carbonOffset: calculateCarbonOffset()\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/orders\", orderData);\n      return response.json();\n    },\n    onSuccess: (order) => {\n      clearCart();\n      toast({\n        title: \"Order placed successfully!\",\n        description: `Order #${order.id} - You've offset ${calculateCarbonOffset()}kg CO2!`\n      });\n      setLocation(`/orders/${order.id}`);\n    },\n    onError: () => {\n      toast({\n        title: \"Order failed\",\n        description: \"Please try again or contact support\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handlePlaceOrder = () => {\n    if (validateStep(2)) {\n      setIsLoading(true);\n      placeOrderMutation.mutate();\n    }\n  };\n\n  const renderProgressIndicator = () => (\n    <div className=\"flex items-center justify-center mb-8 px-4\">\n      {[1, 2, 3].map((step, index) => (\n        <div key={step} className=\"flex items-center\">\n          <div className={`flex items-center justify-center w-8 h-8 rounded-full border-2 ${\n            step <= currentStep \n              ? \"bg-[var(--sage-green)] border-[var(--sage-green)] text-white\" \n              : \"border-gray-300 text-gray-300\"\n          }`}>\n            {step < currentStep ? <Check className=\"h-4 w-4\" /> : step}\n          </div>\n          <span className={`ml-2 text-sm ${\n            step <= currentStep ? \"text-[var(--dark-green)] font-semibold\" : \"text-gray-400\"\n          }`}>\n            {step === 1 && \"Shipping\"}\n            {step === 2 && \"Payment\"} \n            {step === 3 && \"Review\"}\n          </span>\n          {index < 2 && <ChevronRight className=\"h-4 w-4 mx-4 text-gray-300\" />}\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderShippingStep = () => (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <MapPin className=\"h-5 w-5\" />\n          Shipping Information\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"firstName\">First Name *</Label>\n            <Input\n              id=\"firstName\"\n              value={formData.shipping.firstName}\n              onChange={(e) => handleInputChange('shipping', 'firstName', e.target.value)}\n              required\n              data-testid=\"input-firstName\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"lastName\">Last Name *</Label>\n            <Input\n              id=\"lastName\"\n              value={formData.shipping.lastName}\n              onChange={(e) => handleInputChange('shipping', 'lastName', e.target.value)}\n              required\n              data-testid=\"input-lastName\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"email\">Email *</Label>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            value={formData.shipping.email}\n            onChange={(e) => handleInputChange('shipping', 'email', e.target.value)}\n            required\n            data-testid=\"input-email\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"address\">Address *</Label>\n          <Input\n            id=\"address\"\n            value={formData.shipping.address}\n            onChange={(e) => handleInputChange('shipping', 'address', e.target.value)}\n            required\n            data-testid=\"input-address\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"apartment\">Apartment, suite, etc.</Label>\n          <Input\n            id=\"apartment\"\n            value={formData.shipping.apartment}\n            onChange={(e) => handleInputChange('shipping', 'apartment', e.target.value)}\n            data-testid=\"input-apartment\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <Label htmlFor=\"city\">City *</Label>\n            <Input\n              id=\"city\"\n              value={formData.shipping.city}\n              onChange={(e) => handleInputChange('shipping', 'city', e.target.value)}\n              required\n              data-testid=\"input-city\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"state\">State *</Label>\n            <Input\n              id=\"state\"\n              value={formData.shipping.state}\n              onChange={(e) => handleInputChange('shipping', 'state', e.target.value)}\n              required\n              data-testid=\"input-state\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"zipCode\">ZIP Code *</Label>\n            <Input\n              id=\"zipCode\"\n              value={formData.shipping.zipCode}\n              onChange={(e) => handleInputChange('shipping', 'zipCode', e.target.value)}\n              required\n              data-testid=\"input-zipCode\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"phone\">Phone</Label>\n          <Input\n            id=\"phone\"\n            type=\"tel\"\n            value={formData.shipping.phone}\n            onChange={(e) => handleInputChange('shipping', 'phone', e.target.value)}\n            data-testid=\"input-phone\"\n          />\n        </div>\n\n        <div>\n          <Label>Shipping Method</Label>\n          <RadioGroup\n            value={formData.shipping.shippingMethod}\n            onValueChange={(value) => handleInputChange('shipping', 'shippingMethod', value)}\n            className=\"mt-2\"\n          >\n            {SHIPPING_METHODS.map((method) => (\n              <div key={method.id} className=\"flex items-center space-x-2 p-4 border rounded-lg\">\n                <RadioGroupItem value={method.id} id={method.id} />\n                <Label htmlFor={method.id} className=\"flex-1 cursor-pointer\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <method.icon className=\"h-5 w-5\" />\n                      <div>\n                        <div className=\"font-semibold\">{method.name} - ${method.price}</div>\n                        <div className=\"text-sm text-gray-600\">{method.description}</div>\n                      </div>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"bg-[var(--sage-green)] text-white\">\n                      {method.ecoBonus}\n                    </Badge>\n                  </div>\n                </Label>\n              </div>\n            ))}\n          </RadioGroup>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderPaymentStep = () => (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CreditCard className=\"h-5 w-5\" />\n          Payment Information\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"cardNumber\">Card Number *</Label>\n          <Input\n            id=\"cardNumber\"\n            placeholder=\"1234 5678 9012 3456\"\n            value={formData.payment.cardNumber}\n            onChange={(e) => handleInputChange('payment', 'cardNumber', e.target.value)}\n            required\n            data-testid=\"input-cardNumber\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"expiryDate\">Expiry Date *</Label>\n            <Input\n              id=\"expiryDate\"\n              placeholder=\"MM/YY\"\n              value={formData.payment.expiryDate}\n              onChange={(e) => handleInputChange('payment', 'expiryDate', e.target.value)}\n              required\n              data-testid=\"input-expiryDate\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"cvv\">CVV *</Label>\n            <Input\n              id=\"cvv\"\n              placeholder=\"123\"\n              value={formData.payment.cvv}\n              onChange={(e) => handleInputChange('payment', 'cvv', e.target.value)}\n              required\n              data-testid=\"input-cvv\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"cardName\">Name on Card *</Label>\n          <Input\n            id=\"cardName\"\n            value={formData.payment.cardName}\n            onChange={(e) => handleInputChange('payment', 'cardName', e.target.value)}\n            required\n            data-testid=\"input-cardName\"\n          />\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Checkbox\n            id=\"billingAddressSame\"\n            checked={formData.payment.billingAddressSame}\n            onCheckedChange={(checked) => handleInputChange('payment', 'billingAddressSame', checked)}\n          />\n          <Label htmlFor=\"billingAddressSame\">Billing address same as shipping</Label>\n        </div>\n\n        <div className=\"flex items-center gap-2 p-4 bg-green-50 rounded-lg\">\n          <Lock className=\"h-5 w-5 text-green-600\" />\n          <span className=\"text-sm text-green-800\">Your payment information is secure and encrypted</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderReviewStep = () => (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Package className=\"h-5 w-5\" />\n          Order Review\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Order Items */}\n        <div>\n          <h3 className=\"font-semibold mb-4\">Order Items</h3>\n          <div className=\"space-y-4\">\n            {cartItemsWithProducts.map((item) => (\n              <div key={item.id} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                <img\n                  src={item.product!.images?.[0] || \"/placeholder-product.jpg\"}\n                  alt={item.product!.name}\n                  className=\"w-16 h-16 object-cover rounded\"\n                />\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold\">{item.product!.name}</h4>\n                  <p className=\"text-sm text-gray-600\">Quantity: {item.quantity || 1}</p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-semibold\">${(parseFloat(item.product!.price) * (item.quantity || 1)).toFixed(2)}</div>\n                  <div className=\"text-sm text-gray-600\">${item.product!.price} each</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Shipping & Payment Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h3 className=\"font-semibold mb-2\">Shipping Address</h3>\n            <div className=\"text-sm text-gray-600\">\n              <p>{formData.shipping.firstName} {formData.shipping.lastName}</p>\n              <p>{formData.shipping.address}</p>\n              {formData.shipping.apartment && <p>{formData.shipping.apartment}</p>}\n              <p>{formData.shipping.city}, {formData.shipping.state} {formData.shipping.zipCode}</p>\n            </div>\n          </div>\n          <div>\n            <h3 className=\"font-semibold mb-2\">Payment Method</h3>\n            <div className=\"text-sm text-gray-600\">\n              <p>**** **** **** {formData.payment.cardNumber.slice(-4)}</p>\n              <p>{formData.payment.cardName}</p>\n            </div>\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Eco Options */}\n        <div>\n          <h3 className=\"font-semibold mb-4\">Sustainability Options</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n              <div className=\"flex items-center gap-2\">\n                <Leaf className=\"h-5 w-5 text-green-600\" />\n                <span>Carbon Offset (Included)</span>\n              </div>\n              <span className=\"text-green-600 font-semibold\">\n                {calculateCarbonOffset().toFixed(1)}kg CO2 offset\n              </span>\n            </div>\n            {formData.ecoOptions.carbonOffset && (\n              <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                <span>Additional Carbon Offset</span>\n                <span>+$2.00</span>\n              </div>\n            )}\n            {formData.ecoOptions.extraTrees && (\n              <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                <span>Plant Extra Trees</span>\n                <span>+$3.00</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderOrderSummary = () => {\n    const subtotal = calculateSubtotal();\n    const tax = calculateTax(subtotal);\n    const shipping = calculateShipping();\n    const ecoFees = calculateEcoFees();\n    const total = calculateTotal();\n\n    return (\n      <Card className=\"sticky top-24\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <ShoppingCart className=\"h-5 w-5\" />\n            Order Summary\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span>Subtotal</span>\n              <span>${subtotal.toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Shipping</span>\n              <span>${shipping.toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Tax</span>\n              <span>${tax.toFixed(2)}</span>\n            </div>\n            {ecoFees > 0 && (\n              <div className=\"flex justify-between text-green-600\">\n                <span>Eco Options</span>\n                <span>+${ecoFees.toFixed(2)}</span>\n              </div>\n            )}\n          </div>\n          \n          <Separator />\n          \n          <div className=\"flex justify-between text-lg font-semibold\">\n            <span>Total</span>\n            <span className=\"text-[var(--berry-red)]\">${total.toFixed(2)}</span>\n          </div>\n\n          {currentStep < 3 && (\n            <div className=\"space-y-2\">\n              <h4 className=\"font-semibold\">Eco Options</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"carbonOffset\"\n                    checked={formData.ecoOptions.carbonOffset}\n                    onCheckedChange={(checked) => handleInputChange('ecoOptions', 'carbonOffset', checked)}\n                  />\n                  <Label htmlFor=\"carbonOffset\" className=\"text-sm\">\n                    Extra Carbon Offset (+$2.00)\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"extraTrees\"\n                    checked={formData.ecoOptions.extraTrees}\n                    onCheckedChange={(checked) => handleInputChange('ecoOptions', 'extraTrees', checked)}\n                  />\n                  <Label htmlFor=\"extraTrees\" className=\"text-sm\">\n                    Plant Extra Trees (+$3.00)\n                  </Label>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"p-3 bg-green-50 rounded-lg\">\n            <div className=\"flex items-center gap-2 text-green-800\">\n              <Leaf className=\"h-4 w-4\" />\n              <span className=\"text-sm font-medium\">\n                Your order is carbon neutral! We've offset {calculateCarbonOffset().toFixed(1)}kg CO2\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen pt-20 bg-gray-50\">\n        <div className=\"container mx-auto px-4 py-16 text-center\">\n          <ShoppingCart className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n          <h1 className=\"text-2xl font-bold mb-4\">Your Cart is Empty</h1>\n          <p className=\"text-gray-600 mb-8\">Add some products to continue with checkout</p>\n          <Button onClick={() => setLocation(\"/products\")} size=\"lg\">\n            Shop Trending Products\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pt-20 bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <Lock className=\"h-6 w-6 text-[var(--sage-green)]\" />\n            <h1 className=\"text-3xl font-serif font-bold text-[var(--dark-green)]\">\n              Secure Checkout\n            </h1>\n          </div>\n          <p className=\"text-gray-600\">Finalize Your Sustainable Order</p>\n        </div>\n\n        {renderProgressIndicator()}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {currentStep === 1 && renderShippingStep()}\n            {currentStep === 2 && renderPaymentStep()}\n            {currentStep === 3 && renderReviewStep()}\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between\">\n              {currentStep > 1 && (\n                <Button variant=\"outline\" onClick={prevStep} data-testid=\"button-previous\">\n                  Previous\n                </Button>\n              )}\n              <div className=\"ml-auto\">\n                {currentStep < 3 ? (\n                  <Button onClick={nextStep} data-testid=\"button-next\">\n                    Next Step\n                  </Button>\n                ) : (\n                  <Button\n                    onClick={handlePlaceOrder}\n                    disabled={isLoading || placeOrderMutation.isPending}\n                    className=\"bg-gradient-to-r from-[var(--sage-green)] to-[var(--berry-red)] text-white px-8 py-3 text-lg font-semibold\"\n                    data-testid=\"button-place-order\"\n                  >\n                    {isLoading || placeOrderMutation.isPending ? \"Processing...\" : \"Place Order\"}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Order Summary Sidebar */}\n          <div className=\"lg:col-span-1\">\n            {renderOrderSummary()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":24649}}}